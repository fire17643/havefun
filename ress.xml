<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0"
xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
xmlns:content="http://purl.org/rss/1.0/modules/content/"
xmlns:wfw="http://wellformedweb.org/CommentAPI/"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:wp="http://wordpress.org/export/1.2/"
>
<channel>
<title>fire web</title>
<link>http://fireboy.sinaapp.com</link>
<description>Coding and coding</description>
<pubDate>Tue, 21 Oct 2014 15:45:59 +0000</pubDate>
<language>zh-CN</language>
<item>
<title>判断网页中element是否可见的最佳方法</title>
<link>http://fireboy.sinaapp.com/%e5%88%a4%e6%96%ad%e7%bd%91%e9%a1%b5%e4%b8%adelement%e6%98%af%e5%90%a6%e5%8f%af%e8%a7%81%e7%9a%84%e6%9c%80%e4%bd%b3%e6%96%b9%e6%b3%95/</link>
<pubDate>Tue, 30 Sep 2014 02:33:21 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=18</guid>
<description></description>
<content:encoded><![CDATA[以前一直用jQurey的<code class="language-javascript">is(":visible")</code>来判断，这也是 @红薯 在某文中推荐的~。 一次偶然在chrome中发现这个函数居然是消耗CPU最多的，这个函数效率很低！ 经过一翻搜寻，终于找到了它：getBoundingClientRect()——获取element实际的top、bottom、left、right定位值，我们利用它计算element的高度，如果为0，即可认为element不可见。关键是，几乎所有浏览器都支持getBoundingClientRect！
<!--more-->下面是来自于jsGen的代码片段，一个AngularJS的server
<pre class="language-javascript"><code>
factory('isVisible', function () {
return function (element) { 
  var rect = element[0].getBoundingClientRect();
  return !!(rect.bottom - rect.top); 
  }; 
})
//失去焦点使用 jQuery 的扩展支持冒泡
app.directive('ngBlur', function($parse){
  return function(scope, element, attr){
var fn = $parse(attr['ngBlur']);
 $(element).on('focusout', function(event){
 fn(scope, {$event: event});
});
}
});
</code></pre>
]]></content:encoded>
</item>
<item>
<title>css3提示框</title>
<link>http://fireboy.sinaapp.com/css3%e6%8f%90%e7%a4%ba%e6%a1%86/</link>
<pubDate>Tue, 30 Sep 2014 02:45:04 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=22</guid>
<description></description>
<content:encoded><![CDATA[给你的项目增加一个工具提示，不需要额外的代码，你可以通过使用CSS3样式来创建一个类似的效果。 提示只适用于高级浏览器
<h2>css代码：</h2>
<pre class="language-css"><code>
/* * * CSS3 Tips * * A stylesheet for creating tooltips without using anything other than CSS3. * * created by c.bavota * released under GPL v2 * * November 6th, 2013 */ [data-tips] {
position: relative;
text-decoration: none;
}
[data-tips]:after, [data-tips]:before {
position: absolute;
z-index: 100;
opacity: 0;
}
[data-tips]:after {
content: attr(data-tips);
height: 25px;
line-height: 25px;
padding: 0 10px;
font-size: 12px;
text-align: center;
color: #fff;
background: #222;
border-radius: 5px;
text-shadow: 0 0 5px #000;
-moz-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
-webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
white-space: nowrap;
-moz-box-sizing: border-box;
-webkit-box-sizing: border-box;
box-sizing: border-box;
}
[data-tips]:before {
content: "";
width: 0;
height: 0;
border-width: 6px;
border-style: solid;
}
[data-tips]:hover:after, [data-tips]:hover:before {
opacity: 1;
}
/* Top tips */
[data-tips].top-tip:after, [data-tips].top-tip:before {
-webkit-transition: bottom 0.25s ease-in-out, opacity 0.25s ease-in-out;
-moz-transition: bottom 0.25s ease-in-out, opacity 0.25s ease-in-out;
transition: bottom 0.25s ease-in-out, opacity 0.25s ease-in-out;
bottom: 90%;
left: -9999px;
margin-bottom: 12px;
}
[data-tips].top-tip:before {
border-color: #222 transparent transparent transparent;
margin-bottom: 0;
}
[data-tips].top-tip:hover:after, [data-tips].top-tip:hover:before {
bottom: 100%;
left: 0;
}
[data-tips].top-tip:hover:before {
left: 15px;
}
/* Bottom tip */
[data-tips].bottom-tip:after, [data-tips].bottom-tip:before {
-webkit-transition: top 0.25s ease-in-out, opacity 0.25s ease-in-out;
-moz-transition: top 0.25s ease-in-out, opacity 0.25s ease-in-out;
transition: top 0.25s ease-in-out, opacity 0.25s ease-in-out;
top: 90%;
left: -9999px;
margin-top: 12px;
}
[data-tips].bottom-tip:before {
border-color: transparent transparent #222 transparent;
margin-top: 0;
}
[data-tips].bottom-tip:hover:after, [data-tips].bottom-tip:hover:before {
top: 100%;
left: 0;
}
[data-tips].bottom-tip:hover:before {
left: 15px;
}
/* right tip */
[data-tips].right-tip:after, [data-tips].right-tip:before {
-webkit-transition: left 0.25s ease-in-out, opacity 0.25s ease-in-out;
-moz-transition: left 0.25s ease-in-out, opacity 0.25s ease-in-out;
transition: left 0.25s ease-in-out, opacity 0.25s ease-in-out;
top: -9999px;
left: 96%;
margin-left: 12px;
}
[data-tips].right-tip:before {
border-color: transparent #222 transparent transparent;
margin-left: 0;
}
[data-tips].right-tip:hover:after, [data-tips].right-tip:hover:before {
left: 100%;
top: 0;
}
[data-tips].right-tip:hover:before {
top: 7px;
}
/* left tip */
[data-tips].left-tip:after, [data-tips].left-tip:before {
-webkit-transition: right 0.25s ease-in-out, opacity 0.25s ease-in-out;
-moz-transition: right 0.25s ease-in-out, opacity 0.25s ease-in-out;
transition: right 0.25s ease-in-out, opacity 0.25s ease-in-out;
top: -9999px;
right: 96%;
margin-right: 12px;
}
[data-tips].left-tip:before {
border-color: transparent transparent transparent #222;
margin-right: 0;
}
[data-tips].left-tip:hover:after, [data-tips].left-tip:hover:before {
right: 100%;
top: 0;
}
[data-tips].left-tip:hover:before {
top: 7px;
}
</code></pre>
一旦你添加了上面的css3代码之后，你就可以创建你的工具提示了
<a href="http://fireboy.sinaapp.com/" data-tips="Go to http://fireboy.sinaapp.com/" class="top-tip">http://fireboy.sinaapp.com/</a>
你所需要的就是添加<code>data-tip=""</code>参数到任何你需要的HTML元素，同时设置工具提示的方面的class.
<a href="##" data-tips="top-tip" class="top-tip">top-tip</a>  <a href="##" data-tips="bottom-tip" class="bottom-tip">bottom-tip</a>  <a href="##" data-tips="left-tip" class="left-tip">left-tip</a>  <a href="##" data-tips="right-tip" class="right-tip">right-tip</a>
<code>
<style>/* * * CSS3 Tips * * A stylesheet for creating tooltips without using anything other than CSS3. * * created by c.bavota * released under GPL v2 * * November 6th,
2013 */ [data-tips]{position:relative;text-decoration:none;}
[data-tips]:after,
[data-tips]:before{position:absolute;z-index:100;opacity:0;}
[data-tips]:after{content:attr(data-tips);height:25px;line-height:25px;padding:0 10px;font-size:12px;text-align:center;color:#fff;background:#222;border-radius:5px;text-shadow:0 0 5px #000;-moz-box-shadow:0 0 5px rgba(0,0,0,0.3);-webkit-box-shadow:0 0 5px rgba(0,0,0,0.3);box-shadow:0 0 5px rgba(0,0,0,0.3);white-space:nowrap;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;}
[data-tips]:before{content:"";width:0;height:0;border-width:6px;border-style:solid;}
[data-tips]:hover:after,
[data-tips]:hover:before{opacity:1;}
/* Top tips */
[data-tips].top-tip:after,
[data-tips].top-tip:before{-webkit-transition:bottom 0.25s ease-in-out,opacity 0.25s ease-in-out;-moz-transition:bottom 0.25s ease-in-out,opacity 0.25s ease-in-out;transition:bottom 0.25s ease-in-out,opacity 0.25s ease-in-out;bottom:90%;left:-9999px;margin-bottom:12px;}
[data-tips].top-tip:before{border-color:#222 transparent transparent transparent;margin-bottom:0;}
[data-tips].top-tip:hover:after,
[data-tips].top-tip:hover:before{bottom:100%;left:0;}
[data-tips].top-tip:hover:before{left:15px;}
/* Bottom tip */
[data-tips].bottom-tip:after,
[data-tips].bottom-tip:before{-webkit-transition:top 0.25s ease-in-out,opacity 0.25s ease-in-out;-moz-transition:top 0.25s ease-in-out,opacity 0.25s ease-in-out;transition:top 0.25s ease-in-out,opacity 0.25s ease-in-out;top:90%;left:-9999px;margin-top:12px;}
[data-tips].bottom-tip:before{border-color:transparent transparent #222 transparent;margin-top:0;}
[data-tips].bottom-tip:hover:after,
[data-tips].bottom-tip:hover:before{top:100%;left:0;}
[data-tips].bottom-tip:hover:before{left:15px;}
/* right tip */
[data-tips].right-tip:after,
[data-tips].right-tip:before{-webkit-transition:left 0.25s ease-in-out,opacity 0.25s ease-in-out;-moz-transition:left 0.25s ease-in-out,opacity 0.25s ease-in-out;transition:left 0.25s ease-in-out,opacity 0.25s ease-in-out;top:-9999px;left:96%;margin-left:12px;}
[data-tips].right-tip:before{border-color:transparent #222 transparent transparent;margin-left:0;}
[data-tips].right-tip:hover:after,
[data-tips].right-tip:hover:before{left:100%;top:0;}
[data-tips].right-tip:hover:before{top:7px;}
/* left tip */
[data-tips].left-tip:after,
[data-tips].left-tip:before{-webkit-transition:right 0.25s ease-in-out,opacity 0.25s ease-in-out;-moz-transition:right 0.25s ease-in-out,opacity 0.25s ease-in-out;transition:right 0.25s ease-in-out,opacity 0.25s ease-in-out;top:-9999px;right:96%;margin-right:12px;}
[data-tips].left-tip:before{border-color:transparent transparent transparent #222;margin-right:0;}
[data-tips].left-tip:hover:after,
[data-tips].left-tip:hover:before{right:100%;top:0;}
[data-tips].left-tip:hover:before{top:7px;}
</style>
</code>]]></content:encoded>
</item>
<item>
<title>video视频自适应大小</title>
<link>http://fireboy.sinaapp.com/video%e8%a7%86%e9%a2%91%e8%87%aa%e9%80%82%e5%ba%94%e5%a4%a7%e5%b0%8f/</link>
<pubDate>Tue, 30 Sep 2014 03:02:06 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=32</guid>
<description></description>
<content:encoded><![CDATA[经测试，只有video标签有效，frame和embed不适应。
<pre class="language-markup">
<code class="language-markup">&lt;div class="video-container"></code>
<code class="language-markup">&lt;iframe src="a.mov" width="500" height="281" frameborder="0"&gt;&lt;/iframe&gt;</code>
<code class="language-markup">&lt;/div&gt;</code>
<code class="language-markup">&lt;div class="video-container" &gt;</code>
<code class="language-markup">&lt;embed src="a.mov" width="480" height="400">&lt;/embed&gt;</code>
<code class="language-markup">&lt;/div&gt;</code>
</pre>
<pre class="language-css">
<code class="language-css">.video-container{</code>
<code class="language-css">position:relative;</code>
<code class="language-css">height:0;</code>
<code class="language-css">padding-top:20px;</code>
<code class="language-css">padding-bottom:93%;</code>
<code class="language-css">overflow:hidden;</code>
<code class="language-css">}</code>
<code class="language-css">.video-container video, .video-container iframe{</code>
<code class="language-css">position:absolute;</code>
<code class="language-css">}</code>
</pre>]]></content:encoded>
</item>
<item>
<title>iframe高度自适应内容</title>
<link>http://fireboy.sinaapp.com/iframe%e9%ab%98%e5%ba%a6%e8%87%aa%e9%80%82%e5%ba%94%e5%86%85%e5%ae%b9/</link>
<pubDate>Tue, 30 Sep 2014 03:08:43 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=36</guid>
<description></description>
<content:encoded><![CDATA[演示一（如果在同个顶级域名下，不同子域名之间互通信息，设置document.domain="caibaojian.com"
只要修改以上的iframe的ID即可了。或者你可以直接在iframe里面写代码，我们一般为了不污染HTML代码，建议使用上面的代码。
<pre class="language-markup">
<code class="language-markup">
&lt;iframe src="backtop.html" frameborder="0" scrolling="no" id="external-frame" onload="setIframeHeight(this)">&lt;/iframe&gt;
</code>
</pre>
演示二
<pre class="language-javascript">
<code class="language-javascript">
&lt;script language="javascript"&gt;
//输入你希望根据页面高度自动调整高度的iframe的名称的列表
//用逗号把每个iframe的ID分隔. 例如: ["myframe1", "myframe2"]，可以只有一个窗体，则不用逗号。
//定义iframe的ID
var iframeids=["test"];
//如果用户的浏览器不支持iframe是否将iframe隐藏 yes 表示隐藏，no表示不隐藏
var iframehide="yes";
function dyniframesize(){
var dyniframe=new Array();
for (i=0; i&lt;iframeids.length; i++){
if (document.getElementById){
//自动调整iframe高度
dyniframe[dyniframe.length] = document.getElementById(iframeids[i]);
if (dyniframe[i] && !window.opera){
dyniframe[i].style.display="block";
if (dyniframe[i].contentDocument && dyniframe[i].contentDocument.body.offsetHeight){ //如果用户的浏览器是NetScape
dyniframe[i].height = dyniframe[i].contentDocument.body.offsetHeight;
}else if(dyniframe[i].Document && dyniframe[i].Document.body.scrollHeight){ //如果用户的浏览器是IE
dyniframe[i].height = dyniframe[i].Document.body.scrollHeight;
}
}
}
//根据设定的参数来处理不支持iframe的浏览器的显示问题
if ((document.all || document.getElementById) && iframehide=="no"){
var tempobj=document.all? document.all[iframeids[i]] : document.getElementById(iframeids[i]);
tempobj.style.display="block";
}
}
}
if (window.addEventListener){
window.addEventListener("load", dyniframesize, false);
}else if (window.attachEvent){
window.attachEvent("onload", dyniframesize);
}else{
window.onload=dyniframesize;
}
&lt;/script &gt;
</code>
</pre>
演示三
<pre class="language-javascript">
<code class="language-javascript">
function iframeAutoFit(iframeObj){
setTimeout(function(){
if(!iframeObj) return;
iframeObj.height=(iframeObj.Document?iframeObj.Document.body.scrollHeight:iframeObj.contentDocument.body.offsetHeight);
},200)
}
</code>
</pre>
演示四
<pre class="language-markup">
<code class="language-markup">
&lt;iframe src="backtop.html" frameborder="0" scrolling="no" id="test" onload="this.height=100">&lt;/iframe>
</code>
</pre>
<pre class="language-javascript">
<code class="language-javascript">
&lt;script type="text/javascript">
function reinitIframe(){
var iframe = document.getElementById("test");
try{
var bHeight = iframe.contentWindow.document.body.scrollHeight;
var dHeight = iframe.contentWindow.document.documentElement.scrollHeight;
var height = Math.max(bHeight, dHeight);
iframe.height = height;
console.log(height);
}catch (ex){}
}
window.setInterval("reinitIframe()", 200);
&lt;/script>
</code>
</pre>
演示五
打开调试运行窗口可以看到运行。
跨域的时候，由于js的同源策略，父页面内的js不能获取到iframe页面的高度。需要一个页面来做代理。
方法如下：假设www.a.com下的一个页面a.html要包含www.b.com下的一个页面c.html。
我们使用www.a.com下的另一个页面agent.html来做代理，通过它获取iframe页面的高度，并设定iframe元素的高度。
a.html中包含iframe:
<pre class="language-markup">
<code class="language-markup">
&lt;iframe src="http://www.b.com/c.html" id="Iframe" frameborder="0" scrolling="no" style="border:0px;">&lt;/iframe>
在c.html中加入如下代码：
&lt;iframe id="c_iframe"  height="0" width="0"  src="http://www.a.com/agent.html" style="display:none" >&lt;/iframe>
</code>
</pre>
<pre class="language-javascript">
<code class="language-javascript">
&lt;script type="text/javascript">
(function autoHeight(){
var b_width = Math.max(document.body.scrollWidth,document.body.clientWidth);
var b_height = Math.max(document.body.scrollHeight,document.body.clientHeight);
var c_iframe = document.getElementById("c_iframe");
c_iframe.src = c_iframe.src + "#" + b_width + "|" + b_height;  // 这里通过hash传递b.htm的宽高
})();
&lt/script>
</code>
</pre>
最后，agent.html中放入一段js:
<pre class="language-javascript">
<code class="language-javascript">
&lt;script type="text/javascript">
var b_iframe = window.parent.parent.document.getElementById("Iframe");
var hash_url = window.location.hash;
if(hash_url.indexOf("#")>=0){
var hash_width = hash_url.split("#")[1].split("|")[0]+"px";
var hash_height = hash_url.split("#")[1].split("|")[1]+"px";
b_iframe.style.width = hash_width;
b_iframe.style.height = hash_height;
}
&lt;/script>
</code>
</pre>
agent.html从URL中获得宽度值和高度值，并设置iframe的高度和宽度（因为agent.html在www.a.com下，所以操作a.html时不受JavaScript的同源限制）]]></content:encoded>
</item>
<item>
<title>魔幻动画</title>
<link>http://fireboy.sinaapp.com/%e9%ad%94%e5%b9%bb%e5%8a%a8%e7%94%bb/</link>
<pubDate>Tue, 30 Sep 2014 03:11:37 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=38</guid>
<description></description>
<content:encoded><![CDATA[<canvas id='myCanvas' width='578' height='400'>您的浏览器不支持HTML5！</canvas>
<code>
<script type='text/javascript'>
var   canvas =document.getElementById('myCanvas'),
ctx = canvas.getContext('2d'),
particles = [],
patriclesNum = 500,
w = 500,
h = 500,
colors = ['#f35d4f','#f36849','#c0d988','#6ddaf1','#f1e85b'];
canvas.width = 500;
canvas.height = 500;
canvas.style.left = (window.innerWidth - 500)/2+'px';
if(window.innerHeight>500)
canvas.style.top = (window.innerHeight - 500)/2+'px';
function Factory(){
this.x =  Math.round( Math.random() * w);
this.y =  Math.round( Math.random() * h);
this.rad = Math.round( Math.random() * 1) + 1;
this.rgba = colors[ Math.round( Math.random() * 3) ];
this.vx = Math.round( Math.random() * 3) - 1.5;
this.vy = Math.round( Math.random() * 3) - 1.5;
}
function draw(){
ctx.clearRect(0, 0, w, h);
ctx.globalCompositeOperation = 'lighter';
for(var i = 0;i < patriclesNum; i++){
var temp = particles[i];
var factor = 1;
for(var j = 0; j<patriclesNum; j++){
var temp2 = particles[j];
ctx.linewidth = 0.5;
if(temp.rgba == temp2.rgba){
	if(findDistance(temp, temp2)>=50) return;
ctx.strokeStyle = temp.rgba;
ctx.beginPath();
ctx.moveTo(temp.x, temp.y);
ctx.lineTo(temp2.x, temp2.y);
ctx.stroke();
factor++;
}
}
ctx.fillStyle = temp.rgba;
ctx.strokeStyle = temp.rgba;
ctx.beginPath();
ctx.arc(temp.x, temp.y, temp.rad*factor, 0, Math.PI*2, true);
ctx.fill();
ctx.closePath();
ctx.beginPath();
ctx.arc(temp.x, temp.y, (temp.rad+5)*factor, 0, Math.PI*2, true);
ctx.stroke();
ctx.closePath();
temp.x += temp.vx;
temp.y += temp.vy;
if(temp.x > w)temp.x = 0;
if(temp.x < 0)temp.x = w;
if(temp.y > h)temp.y = 0;
if(temp.y < 0)temp.y = h;
}
}
function findDistance(p1,p2){
return Math.sqrt( Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2) );
}
window.requestAnimFrame = (function(){
return  window.requestAnimationFrame       ||
window.webkitRequestAnimationFrame ||
window.mozRequestAnimationFrame    ||
function( callback ){
window.setTimeout(callback, 1000 / 60);
};
})();
(function init(){
for(var i = 0; i < patriclesNum; i++){
particles.push(new Factory);
}
})();
(function loop(){
draw();
requestAnimFrame(loop);
})();
</script>
</code>]]></content:encoded>
</item>
<item>
<title>CSS Hack代码与浏览兼容总结</title>
<link>http://fireboy.sinaapp.com/css-hack%e4%bb%a3%e7%a0%81%e4%b8%8e%e6%b5%8f%e8%a7%88%e5%85%bc%e5%ae%b9%e6%80%bb%e7%bb%93/</link>
<pubDate>Tue, 30 Sep 2014 03:33:29 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=41</guid>
<description></description>
<content:encoded><![CDATA[1, IE条件注释法，微软官方推荐的hack方式。
<pre class="language-markup">
<code  class="language-markup">
&lt;!-- 只在IE下生效 --&gt;
&lt;!--[if IE]&gt;
这段文字只在IE浏览器上显示
&lt;!--[endif]--&gt;
&lt;!-- 只在IE6下生效 --&gt;
&lt;!--[if IE 6]&gt;
这段文字只在IE6浏览器上显示
&lt;![endif]--&gt;
&lt;!-- 只在IE6以上版本生效--&gt;
&lt;!--[if gt IE 6]&gt;
这段文字只在IE6以上版本IE浏览器上显示
&lt;![endif]--&gt;
&lt;!-- 只在IE7上不生效 --&gt;
&lt;!--[if ! IE 7]&gt;
这段文字在非IE7浏览器上显示
&lt;![endif]--&gt;
&lt;!-- 非IE浏览器生效 --&gt;
&lt;!--[if !IE]&gt;
这段文字只在非IE浏览器上显示
&lt;!--&lt;![endif]--&gt;
</code>
</pre>
2.常用的IE hack
<pre class="language-css">
<code class="language-css">
csshack{
background:blue;
background:blue\9; /*all ie*/
background:blue\0/; /*ie8-ie9*/
background/*\**/: blue\9; /* ie7-ie8*/
*background:blue;/* or #background: blue */ /*ie6-ie7*/    
+background:blue; /*ie7*/
_background:blue; /*ie6*/
}
:root .csshack{
background:blue; /*大于等于ie9*/
}
/* IE9, IE10 */
@media screen and (min-width:0\0) {
    .csshack { color: red}
}
/* IE 10+ */
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
   #veintiun { color: red; }
}
/* saf3+, chrome1+ */
@media screen and (-webkit-min-device-pixel-ratio:0) {
 #diez  { color: red  }
}
/* iPhone / mobile webkit */
@media screen and (max-device-width: 480px) {
 #veintiseis { color: red  }
}
/* Firefox only. 1+ */
#veinticuatro,  x:-moz-any-link  { color: red }
/* Firefox 3.0+ */
#veinticinco,  x:-moz-any-link, x:default  { color: red  }
/* FF 3.5+ */
body:not(:-moz-handler-blocked) #cuarenta { color: red; }
</code>
</pre>
3.IE CSS Media，来自这里
<pre class="language-css">
<code class="language-css">
/* @media hacks */
/* IE6/7 only (via Keith Clarke) */
@media screen\9 { }
/* IE6/7/8 (via Keith Clarke) */
@media \0screen\,screen\9 {}
/* IE8 (via Keith Clarke) */
@media \0screen { }
/* IE8/9/10 */
@media screen\0 { }
/* IE9/10 */
@media screen and (min-width:0\0) {
    body { background: yellow; }
} </code>
</pre>]]></content:encoded>
</item>
<item>
<title>励志篇-毕业5年决定你的命运</title>
<link>http://fireboy.sinaapp.com/%e5%8a%b1%e5%bf%97%e7%af%87-%e6%af%95%e4%b8%9a5%e5%b9%b4%e5%86%b3%e5%ae%9a%e4%bd%a0%e7%9a%84%e5%91%bd%e8%bf%90/</link>
<pubDate>Tue, 30 Sep 2014 05:23:55 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=49</guid>
<description></description>
<content:encoded><![CDATA[之前一直记得有一篇文章是叫“毕业五年决定你的命运”，今天终于被我发现了这篇文章。转载与各位朋友共勉。
正如"打工皇帝"唐骏说："我觉得有两种人不要跟别人争利益和价值回报。第一种人就是刚刚进入企业的人，头5年千万不要说你能不能多给我一点儿工资，最重要的是能在企业里学到什么，对发展是不是有利……"
人总是从平坦中获得的教益少，从磨难中获得的教益多；从平坦中获得的教益浅，从磨难中获得的教益深。一个人在年轻时经历磨难，如能正确视之，冲出黑暗，那就是一个值得敬慕的人。最要紧的是先练好内功，毕业后这5年就是练内功的最佳时期，练好内功，才有可能在未来攀得更高。
出路在哪里？出路在于思路！
其实，没有钱、没有经验、没有阅历、没有社会关系，这些都不可怕。没有钱，可以通过辛勤劳动去赚；没有经验，可以通过实践操作去总结；没有阅历，可以一步一步去积累；没有社会关系，可以一点一点去编织。但是，没有梦想、没有思路才是最可怕的，才让人感到恐惧，很想逃避!
人必须有一个正确的方向，无论你多么意气风发，无论你是多么足智多谋，无论你花费了多大的心血，如果没有一个明确的方向，就会过得很茫然，渐渐就丧失了斗志，忘却了最初的梦想，就会走上弯路甚至不归路，枉费了自己的聪明才智，误了自己的青春年华。
荷马史诗《奥德赛》中有一句至理名言："没有比漫无目的地徘徊更令人无法忍受的了。"毕业后这5年里的迷茫，会造成10年后的恐慌，20年后的挣扎，甚至一辈子的平庸。如果不能在毕业这5年尽快冲出困惑、走出迷雾，我们实在是无颜面对10年后、20年后的自己。毕业这5年里，我们既有很多的不确定，也有很多的可能性。
毕业这5年里，我们既有很多的待定，也有很多的决定。
迷茫与困惑谁都会经历，恐惧与逃避谁都曾经有过，但不要把迷茫与困惑当作可以自我放弃、甘于平庸的借口，更不要成为自怨自艾、祭奠失意的苦酒。生命需要自己去承担，命运更需要自己去把握。在毕业这5年里，越早找到方向，越早走出困惑，就越容易在人生道路上取得成就、创造精彩。无头苍蝇找不到方向，才会四处碰壁；一个人找不到出路，才会迷茫、恐惧。
生活中，面对困境，我们常常会有走投无路的感觉。不要气馁，坚持下去，要相信年轻的人生没有绝路，困境在前方，希望在拐角。只要我们有了正确的思路，就一定能少走弯路，找到出路！
成功的人不是赢在起点，而是赢在转折点。
不少刚刚毕业的年轻人，总是奢望马上就能找到自己理想中的工作。然而，很多好工作是无法等来的，你必须选择一份工作作为历练。职业旅程中的第一份工作，无疑是踏入社会这所大学的起点。也许你找了一份差强人意的工作，那么从这里出发，好好地沉淀自己，从这份工作中汲取到有价值的营养，厚积薄发。千里之行，始于足下，只要出发，就有希望到达终点。
起点可以相同，但是选择了不同的拐点，终点就会大大不同！
毕业这几年，我们的生活、感情、职业等都存在很多不确定的因素，未来也充满了各种可能。这个时候，必须学会选择，懂得放弃，给自己一个明确的定位，使自己稳定下来。如果你不主动定位，就会被别人和社会"定型"！
可以这么说：一个人在毕业这5年培养起来的行为习惯，将决定他一生的高度。我们能否成功，在某种程度上取决于自己对自己的评价，这就是定位。你给自己定位是什么，你就是什么。定位能决定人生，定位能改变命运。丑小鸭变成白天鹅，只要一双翅膀；灰姑娘变成美公主，只要一双水晶鞋。
人的命，三分天注定，七分靠打拼，有梦就"会红"，爱拼才会赢。只要不把自己束缚在心灵的牢笼里，谁也束缚不了你去展翅高飞。
现实情况远非他们所想的那样。于是，当优越感逐渐转为失落感甚至挫败感时，当由坚信自己是一块"金子"到怀疑自己是一粒"沙子"时，愤怒、迷茫、自卑就开始与日俱增。
其实，应该仔细掂量一下自己，你是否真是金子？是真金，手中要有绝活，才能上要有过人之处才行。一句话：真金是要靠实力来证明的，只有先把自己的本领修炼好了，才有资格考虑伯乐的事情
每颗珍珠原本都是一粒沙子，但并不是每一粒沙子都能成为一颗珍珠。
想要卓尔不群，就要有鹤立鸡群的资本。忍受不了打击和挫折，承受不住忽视和平淡，就很难达到辉煌。年轻人要想让自己得到重用，取得成功，就必须把自己从一粒沙子变成一颗价值连城的珍珠。
天气有下雨与日出，人生有高峰与低谷。莫为浮云遮望眼，风物长宜放眼量。只要拂去阴霾，就能亮出朗朗晴空。如果你在工作上有些不如意，要相信自己不会一直处于人生的低谷期，总有一天能冲破重重云层。告诉自己：我并没有失败，只是暂时没有成功！只要在内心点亮一盏希望之灯，一定能驱散黑暗中的阴霾，迎来光明。
的确，论资历，他们是不折不扣的职场菜鸟，业务涉及不深，人脉一穷二白，在工作中经常碰壁。他们的压力并不一定都像千钧大石，而是像大雨来临前的天色，灰色低沉，明明有空间，却被灰色填满每个缝隙，只能等待大雨倾盆之后的晴空。
"起得比鸡早，睡得比狗晚，干得比驴多，吃得比猪差。"这是很多刚刚毕业的人喜欢用来调侃自己生活状态的话。虽然有点儿夸张，但是，他们中的很多人的确一直都被灰色心情所笼罩--心里永远是多云转阴。记得有位哲人曾说："我们的痛苦不是问题本身带来的，而是我们对这些问题的看法产生的。"换个角度看人生，是一种突破、一种解脱、一种超越、一种高层次的淡泊与宁静，从而获得自由自在的快乐。
一位哲人说："人生就是一连串的抉择，每个人的前途与命运，完全把握在自己手中，只要努力，终会有成。"就业也好，择业也罢，创业亦如此，只要奋发努力，都会成功。你是不是准备把生命的承诺全部都交给别人？
毕业后这5年，是改变自己命运的黄金时期。在最能决定自己命运时，如果还不把握，那你还要等到什么时候呢？我的人生我做主，命运由己不由人。
不要活在别人的嘴里，不要活在别人的眼里，而是把命运握在自己手里。
别说你没有背景，自己就是最大的背景。美国作家杰克·凯鲁亚克说过一句话："我还年轻，我渴望上路。"在人生的旅途中，我们永远都是年轻人，每天都应该满怀渴望。每个人的潜能都是无限的，关键是要发现自己的潜能和正确认识自己的才能，并找到一个能充分发挥潜能的舞台，而不能只为舞台的不合适感到不快。要客观公正地看待自己的能力，结合自己的实际情况和爱好冷静选择，尽可能到最需要自己、最适合自己的地方。
在人力资源管理界，特别流行一个说法，即"骑马，牵牛，赶猪，打狗"理论：人品很好，能力又很强的，是千里马，我们要骑着他；人品很好但能力普通的，是老黄牛，我们要牵着他；人品、能力皆普通的，就是"猪"，我们要赶走他；人品很差能力很强的，那是"狗"，我们要打击他。
我想，刚刚毕业几年的你，一样胸怀大志，一样想成为一匹被人赏识、驰骋沙场的千里马吧？那么，就好好沉淀下来。低就一层不等于低人一等，今日的俯低是为了明天的高就。所谓生命的价值，就是我们的存在对别人有价值。能被人利用是一件好事，无人问津才是真正的悲哀！
能干工作、干好工作是职场生存的基本保障。任何人做工作的前提条件都是他的能力能够胜任这项工作。能干是合格员工最基本的标准，肯干则是一种态度。一个职位有很多人都能胜任，都有干好这份工作的基本能力，然而，能否把工作做得更好一些，就要看是否具有踏实肯干、苦于钻研的工作态度了。
在能干的基础上踏实肯干
工作中，活干得比别人多，你觉得吃亏；钱拿得比别人少，你觉得吃亏；经常加班加点，你觉得吃亏……其实，没必要这样计较，吃亏不是灾难，不是失败，吃亏也是一种生活哲学。现在吃点儿小亏，为成功铺就道路，也许在未来的某个时刻，你的大福突然就来了。
能吃亏是做人的一种境界，是处世的一种睿智。
在工作中并不是多做事或多帮别人干点儿活就是吃亏。如果领导让你加加班、赶赶任务，别以为自己吃了大亏，反而应该感到庆幸，因为领导只叫了你，而没叫其他人，说明他信任你、赏识你。吃亏是一种贡献，你贡献得越多，得到的回报也就越多。乐于加班，就是这样的一种吃亏。
舍得舍得，有舍才有得；学会在适当时吃些亏的人绝对不是弱智，而是大智。
给别人留余地就是给自己留余地，予人方便就是予己方便，善待别人就是善待自己。
傻人有傻福，因为傻人没有心计。和这样的人在一起，身心放松，没有太多警惕，就能相互靠近。傻在很多时候意味着执着和忠贞，也意味着宽厚和诚实，让人不知不觉站到他一边。傻人无意中得到的，比聪明人费尽心机得到的还多。毕业这几年，你的天空中只飘着几片雪花，这样你就满足了吗？成功需要坚持与积累，与其专注于搜集雪花，不如省下力气去滚雪球。巴菲特说："人生就像滚雪球，最重要的是发现很湿的雪和很长的坡。"让自己沉淀下来，学着发现"很湿的雪"，努力寻找"很长的坡"。记住：散落的雪花会很快融化，化为乌有，只有雪球才更实在，才能长久。
在毕业这几年里，你要是能做到比别人多付出一分努力，就意味着比别人多积累一分资本，就比别人多一次成功的机会。
什么是职业化呢？职业化就是工作状态的标准化、规范化、制度化，即在合适的时间、合适的地点用合适的方式说合适的话、做合适的事，使知识、技能、观念、思维、态度、心理等符合职业规范和标准。
"在每个行业里，都有很多出色的人才，他们之所以能存在，是因为比别人更努力、更智慧、更成熟。但是，最重要的是，他们比一般人更加职业化！这就是为什么我现在能当你老板的原因。一个人仅仅专业化是不够的，只有职业化的人才能飞在别人前面，让人难以超越！"不要以为我们现在已经生存得很安稳了。对于毕业5年的人来讲，一定要认清即将面临的五大挑战。
一、赡养父母。
二、结婚生子。
三、升职加薪。
四、工作压力。
五、生活质量。
有的人为生存而雀跃，目光总是停在身后，三天打鱼两天晒网，有始无终。
有的人为发展而奋斗，目光总是盯在正前方，每天进步一点点，坚持不懈。
毕业这几年，不能没有追求和探索，不能没有理想和目标。人生如逆水行舟，不进则退。甘于现状的生活就是不再前行的船，再也无法追上时代前进的步伐。一定要抓紧每一秒钟的时间来学习，要明白学习不是学生的专利。小聪明的人最得意的是：自己做过什么？大智慧的人最渴望的是：自己还要做什么？
小聪明是战术，大智慧是战略；小聪明看到的是芝麻，大智慧看到的是西瓜。
在这个世界上，既有大人物，也有小角色，大人物有大人物的活法，小人物有小人物的潇洒，每个人都有自己的生活方式，谁也勉强不了谁。但是，小聪明只能有小成绩和小视野，大智慧才能有大成就和大境界。小企业看老板，中企业看制度，大企业看文化。
小公司与大企业都有生存之道，没有好坏之分，但对一个人不同阶段的影响会不同。
小公司肯定想要发展为大企业，这是一种目标，年轻人也要给自己的职业生涯制定目标。毕业几年的你，是否经常会怯场或者是感到没有底气？居安思危绝对不是危言耸听！此刻打盹，你将做梦；此刻学习，你将圆梦。在竞争激烈的人生战场上，打盹的都是输家！
每个人在年轻的时候似乎都豪情万丈，什么都不怕，可是随着年龄的增长，每天想着房子、工作、养家糊口这些俗事儿，再也没有年轻时那种敢于"上天探星、下海捞月"的勇气了。是我们改变了生活，还是生活改变了我们？我们的思想越来越复杂，因为有了越来越多的舍不得、越来越多的顾虑，我们总是在徘徊、总是在犹豫。毕业开始一两年，生活的重担会压得我们喘不过气来，挫折和障碍堵住四面八方的通口，我们往往在压迫得自己发挥出潜能后，才能杀出重围，找到出路。可是两三年后，身上的重担开始减轻，工作开始一帆风顺，我们就松懈了下来，渐渐忘记了潜在的危险。直到有一天危机突然降临，我们在手足无措中被击败……毕业这几年，仍然处于危险期，一定要有居安思危的意识，好好打拼，这样才能有一个真正的安全人生！
生于忧患，死于安乐。如果你想跨越自己目前的成就，就不能画地自限，而是要勇于接受挑战。对畏畏缩缩的人来说，真正的危险正在于不敢冒险！
年轻人在社会的重压下，适应能力已变得越来越强，只是他们不自觉地习惯被环境推着走。他们不敢冒险，怕给自己带来终身的遗憾，于是告慰自己："我对得起自己、对得起家人，因为我已竭尽全力。"其实，人只有不断挑战和突破才能逐渐成长。长期固守于已有的安全感中，就会像温水里的青蛙一样，最终失去跳跃的本能。
经历了这几年社会生活，你应该明白：这个世界上有富也有贫，有阴也有亮，有丑也有美，到底看到什么，取决于自己是积极还是消极。在年轻时学会勤勉地工作，用一种光明的思维对待生活，那么，只要张开手掌，你就会发现，里面有一片灿烂的人生。
把感恩刻在石头上，深深地感谢别人帮助过你，永远铭记，这是人生应有的一种境界；把仇恨写在沙滩上，淡淡忘掉别人伤害过你，学会宽容，让所有的怨恨随着潮水一去不复返，这也是一种人生境界。
学会倒出水，才能装下更多的水。从毕业那天开始，学会把每天都当成一个新的起点，每一次工作都从零开始。如果你懂得把"归零"当成一种生活的常态，当成一种优秀的延续，当成一种时刻要做的事情，那么，经过短短几年，你就可以完成自己职业生涯的正确规划与全面超越。
在职业起步的短短道路上，想要得到更好、更快、更有益的成长，就必须以归零思维来面对这个世界。不要以大学里的清高来标榜自己，不要觉得自己特别优秀，而是要把自己的姿态放下，把自己的身架放低，让自己沉淀下来，抱着学习的态度去适应环境、接受挑战。放下"身段"才能提高身价，暂时的俯低终会促成未来的高就。
年轻人从校园或者从一个环境进入一个新环境，就要勇于将原来环境里熟悉、习惯、喜欢的东西放下，然后从零开始。我们想在职场上获得成功，首先就要培养适应力。从自然人转化为单位人是融入职场的基本条件。一个人起点低并不可怕，怕的是境界低。越计较自我，便越没有发展前景；相反，越是主动付出，那么他就越会快速发展。很多今天取得一定成就的人，在职业生涯的初期都是从零开始，把自己沉淀再沉淀、倒空再倒空、归零再归零，正因为这样，他们的人生才一路高歌，一路飞扬。
在毕业这几年里，我们要让过去归零，才不会成为职场上那只背着重壳爬行的蜗牛，才能像天空中的鸟儿那样轻盈地飞翔。请好好品味一下杰克·韦尔奇说过的一句话："纠正自己的行为，认清自己，从零开始，你将重新走上职场坦途。"　吐故才能纳新，心静才能身凉，有舍才能有得，杯空才能水满，放下才能超越。
归零思维五大表现：心中无我，眼中无钱，念中无他，朝中无人，学无止境。
年轻人难免带着几分傲气，认为自己无所不能、所向披靡，其实不然，初入职场的新人还是个"婴儿"，正处在从爬到走的成长阶段。在毕业这几年里，一定要让自己逐步培养起学徒思维、海绵思维、空杯思维，具有这样思维的人心灵总是敞开的，能随时接受启示和一切能激发灵感的东西，他们时刻都能感受到成功女神的召唤。]]></content:encoded>
</item>
<item>
<title>常见的几种水平和垂直居中实现方式</title>
<link>http://fireboy.sinaapp.com/%e6%af%8f%e4%b8%80%e5%a4%a9%e9%83%bd%e6%98%af%e7%89%b9%e5%88%ab%e7%9a%84%e6%97%a5%e5%ad%90/</link>
<pubDate>Tue, 30 Sep 2014 05:26:41 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=52</guid>
<description></description>
<content:encoded><![CDATA[<h2>1.设置外层div相对定位，内层div绝对定位</h2>
<pre class="language-css">
<code class="language">
.center-box{
position:absolute;
left:0;
right:0;
top:0;
bottom:0;
margin:auto;
width:500px;
height:300px;
background: red;
}
</code>
</pre>
<code>
<style>
.pr{position:relative;}
.parent{background: #4ededa;overflow:auto;width:100%;height:300px;}
.center-box{
		position:absolute;
		left:0;
		right:0;
		top:0;
		bottom:0;
		margin:auto;
		width:300px;
		height:200px;
background:#A2A8AF;
	}
.center-box2{
	position: absolute;
	left: 50%;
	top: 50%;
	width: 300px;
	height: 200px;
	margin-top: -100px;
	margin-left: -150px;
background:#123;
}
.center-box3{
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%,-50%);
width: 300px;
	height: 200px;
background:#123;
}
.parent4{
	background: #4ededa;
	vertical-align: middle;
	display: table-cell;
	width:400px;
	height:250px;
}
.center-box4{
	width: 300px;
	height: 200px;
	margin:0 auto;
	background: #123;
}
.center-box5{
	width: 300px;
	height: 200px;
	background: #123;
	display: inline-block;
	vertical-align: middle;
}
.parent5{
	text-align: center;
	height:300px;
	background: rgb(112, 112, 139);
}
.parent5:after{
	content: '';
	height: 100%;
	margin-left: -0.25em;
	width: 0px;
	display: inline-block;
	vertical-align: middle;
}
.parent6{
	background: rgb(142, 158, 192);
	width: 100%;
	height: 300px;
	margin: 0 auto;
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
	-webkit-box-align: center;
	-moz-box-align: center;
	-ms-flex-align: center;
	-webkit-align-items: center;
	align-items: center;
	-webkit-box-pack: center;
	-moz-box-pack: center;
	-ms-flex-pack: center;
	-webkit-justify-content: center;
	justify-content: center;
}
.center-box6{
	width: 300px;
	height: 200px;
	background: #A44F4F;
}
</style>
</code>
如<div class="pr parent"><div class="center-box"></div></div>
<h2>2.margin 负值</h2>
这可能是最常见的方式了，如果知道了确切的尺寸，把margin设置为宽高的一半，同时top: 50% left:50% 就能居中了
缺点：
不适合响应式布局；不能设置百分比的宽高和 min-/max-；
内容可能会溢出容器；
必须考虑padding的影响或者使用 box-sizing: border-box；
<div class="pr parent"><div class="center-box2"></div></div>
<h2>3.css3 - Transforms</h2>
<pre class="language-css">
<code class="language">
.center-box{
position:absolute;
left:50%;
top:50%;
transform: translate(-50%,-50%);
margin:auto;
width:300px;
height:200px;
background: red;
}
</code>
</pre>
<div class="pr parent"><div class="center-box3"></div></div>
<h2>4.table-cell</h2>
<pre class="language-css">
<code class="language-css">
.center-box4{
display: table-cell;
width: 300px;
height: 200px;
margin:0 auto;
vertical-align: middle;
}
</code>
</pre>
<div class="pr parent4"><div class="center-box4"></div></div>
<h2>5.Inline-block</h2>
<div class="pr parent5"><div class="center-box5">OMG, I’M CENTERED
Inline-Block.OMG, I’M CENTERED
Inline-Block.</div></div>
<h2>6.css3 Flexbox</h2>
<div class="pr parent6"><div class="center-box6">OMG, I’M CENTERED
Inline-Block.OMG, I’M CENTERED Box.</div></div>]]></content:encoded>
</item>
<item>
<title>每一天都是特别的日子</title>
<link>http://fireboy.sinaapp.com/%e6%af%8f%e4%b8%80%e5%a4%a9%e9%83%bd%e6%98%af%e7%89%b9%e5%88%ab%e7%9a%84%e6%97%a5%e5%ad%90-2/</link>
<pubDate>Tue, 30 Sep 2014 05:31:55 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=56</guid>
<description></description>
<content:encoded><![CDATA[多年前我跟一位同学谈话。那时他太太刚去世不久，他告诉我说，他在整理他太太的东西的时候，发现了一条丝质的围巾，那是他们去纽约旅游时，在一家名牌店买的。那是一条雅致、漂亮的名牌围巾，高昂的价格卷标还挂在上面，他太太一直舍不得用，她想等一个特殊的日子才用。讲到这里，他停住了，我也没接话，好一会儿后他说：“再也不要把好东西留到特别的日子才用，你活着的每一天都是特别的日子。”
以后，每当想起这几句话时，我常会把手边的杂事放下，找一本小说，打开音响，躺在沙发上，抓住一些自己的时间。我会从落地窗欣赏淡水河的景色，不去管玻璃上的灰尘，我会拉着家人到外面去吃饭，不管家里的饭菜该怎么处理。生活应当是我们珍惜的一种经验，而不是要捱过去的日子。
我曾将这段谈话与一位朋友分享。后来见面时，她告诉我她现在已不像从前那样，把美丽的瓷具放在酒柜里了。以前她也以为要留到特别的日子才拿出来用，后来发现那一天从未到来。“将来”、“总有一天”已经不存在于她的字典里了。如果有什么值得高兴的事，有什么得意的事，她现在就要听到，就要看到。
其实每天早上我们睁开眼睛时，都要告诉自己这是特别的一天。每一天，每一分钟都是那么可贵。]]></content:encoded>
</item>
<item>
<title>完美的全背景图片</title>
<link>http://fireboy.sinaapp.com/%e5%ae%8c%e7%be%8e%e7%9a%84%e5%85%a8%e8%83%8c%e6%99%af%e5%9b%be%e7%89%87/</link>
<pubDate>Tue, 30 Sep 2014 05:37:55 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=61</guid>
<description></description>
<content:encoded><![CDATA[我们的目标是创建一张背景图，而且它能一直覆盖整个浏览器的窗口。我们看看它有什么特点：
图片覆盖整个页面，没有白边
按需要缩放图片
保留图片比例（方向 比例）
图片居中
不产生滚动条
尽可能保证浏览器的兼容性
不使用Flash这样的小把戏
<h2>强劲 简单 先进的CSS3方式</h2>
鉴于css3中已经有了background-size 这个属性，那我们完全就可以使用css来实现了。使用html元素（不用body是因为至少html的height总是浏览器窗口的高度）。我们设置background为fixed和center，再使用background-size来适应大小
<pre class="language-css"><code class="language"> 
 html { 
  background: url(images/bg.jpg) no-repeat center center fixed; 
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
 } 
</code></pre>
可用于：
Safari 3+
Chrome Whatever+
IE 9+
Opera 10+ (Opera 9.5 支持background-size 但不是这个关键字)
Firefox 3.6+ (Firefox 4 支持没有前缀的版本)
更新：
感谢Goltzman 在评论中提出了IE的兼容方式：
<pre class="language-css">	<code class="language-css"> html { filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='.myBackground.jpg', sizingMethod='scale'); -ms-filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='myBackground.jpg', sizingMethod='scale')"; } </code></pre>
注意，读者 Pierre Orsander提出他们尝试使用这种方式时候发现页面在关闭时会出现一些问题。
更新：Matt Litherland任何人尝试使用上述IE的filter，在滚动条、死链、或其他地方出现问题时，就不该在html或body元素上添加样式，而是使用一个position为fixed的，width、height均为100%的div代替。
<h2>纯CSS方式 #1</h2>
同样，非常感谢<a href="http://dougneiner.com/" target="_blank">Doug Neiner</a> 提供的另一个版本。这里我们使用一个inline的img标签，这就可以在任何浏览器里都能改变大小。设置一个min-height来保证能够在垂直方向上填充浏览器，设置width 100%保证水平填充。同时给img设置min-width来保证图片永远不会比它本身还小。
这里可用到的特殊技巧就是使用media query来检查是否浏览器比图片还要小，使用left和margin-left的组合来保证图片居中。
<pre class="language-css">
<code class="language">
 img.bg {
  /* Set rules to fill background */
  min-height: 100%;
  min-width: 1024px;

  /* Set up proportionate scaling */
  width: 100%;
  height: auto;

  /* Set up positioning */
  position: fixed;
  top: 0;
  left: 0;
}

@media screen and (max-width: 1024px) { /* Specific to this particular image */
  img.bg {
    left: 50%;
    margin-left: -512px;   /* 50% */
  }
}
</code>
</pre>
<h2>纯CSS方式 #2</h2>
另一种简单的实现方式是在页面上放一个inline的img标签，通过position:fixed定位于左上角,ming-width和min-height为100%，保留其长宽比
<pre class="language-css">
<code class="language-css">
 &lt;img src="images/bg.jpg" id="bg" alt=""&gt;
#bg {
  position: fixed; 
  top: 0; 
  left: 0; 

  /* Preserve aspet ratio */
  min-width: 100%;
  min-height: 100%;
}
</code>
</pre>
然而，这样没有使图片居中。那我们就把它设为fixed，同时包裹于div内，而且这个div是浏览器窗口宽高的200%。那么图片就能居中定位，同时保留长宽比。
<pre class="language-css">
<code class="language-css">
 &lt;div id="bg">
&lt;img src="images/bg.jpg" alt="">
&lt;/div>
#bg {
  position: fixed; 
  top: -50%; 
  left: -50%; 
  width: 200%; 
  height: 200%;
}
#bg img {
  position: absolute; 
  top: 0; 
  left: 0; 
  right: 0; 
  bottom: 0; 
  margin: auto; 
  min-width: 50%;
  min-height: 50%;
}
</code>
</pre>
可用于：
Safari / Chrome / Firefox (最近版本都是可行的)
IE 8+
Opera (任何版本) 以及 IE 都以相同方式崩溃(定位错误，具体原因不明)[最新的webkit内核的可行]
Peter VanWylen 提到：如果你是通过js添加的图片，那么在IE8 9 10 中img需要设置 width: auto; and height: auto;
<h2>绝对定位方式</h2>
<pre class="language-css">
<code class="language-css">
 &lt;img src="images/bg.jpg" id="bg" alt="">
#bg{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    min-width: 50%;
    min-height: 50%;
    opacity: 0.2;
}
</code>
</pre>
<h2>jQuery方式</h2>
如果我们知道一张图品的宽高比是大于还是小于浏览器的窗口，那事情就变得容易多了。若果小，那我们只需要设置width 100%，那它就能把宽高填充。如果图片要高我们只需要设置height 100%就能达到同样效果。
上述想法可以通过js实现，我更倾向于jQuery。
<pre class="language-css">
<code class="language-css">
 &lt;img src="images/bg.jpg" id="bg" alt="">
#bg { position: fixed; top: 0; left: 0; }
.bgwidth { width: 100%; }
.bgheight { height: 100%; }
</code>
</pre>
<pre class="language-javascript">
<code class="language-javascript">
$(window).load(function() {    
    var theWindow = $(window),
        $bg = $("#bg"),
aspectRatio = $bg.width() / $bg.height();    
    function resizeBg() {
        if ( (theWindow.width() / theWindow.height()) < aspectRatio ) {
    $bg.removeClass().addClass('bgheight');
 } else {
             $bg.removeClass().addClass('bgwidth');
}
     }
     theWindow.resize(resizeBg).trigger("resize");
});
</code>
</pre>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
</item>
<item>
<title>一些难解的JavaScript语法特性1</title>
<link>http://fireboy.sinaapp.com/%e4%b8%80%e4%ba%9b%e9%9a%be%e8%a7%a3%e7%9a%84javascript%e8%af%ad%e6%b3%95%e7%89%b9%e6%80%a7/</link>
<pubDate>Tue, 30 Sep 2014 05:40:11 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=65</guid>
<description></description>
<content:encoded><![CDATA[一些蛋疼的JavaScript语法特性,有解释。
逐个来看
1.<pre class="language-javascript"><code class="language-javascript">
(function(){
    alert(typeof arguments);
})();
</code></pre>
因为typeof能返回的值只有 object string number function undefined boolean 这6种，而且arguments是个类数组（不是真正的数组），数组、类数组的typeof都会返回object。所以答案：object。
2.<pre class="language-javascript"><code class="language-javascript">
var f = function g() {
    return 23;
};
typeof g();
</code></pre>
这个呢，可以参考这里。因为这个函数表达式中的 g() 对外是不可见的  所以typeof g() 会系统出错。答案：Error
3.<pre class="language-javascript"><code class="language-javascript">
(function (x) {
    delete x;
    return x;
})(1);
</code></pre>
这个也很简单，delete不能删除 变量 参数，  只能删除一个对象下面的属性。所以x的值不会变化 ，返回值：1
4.<pre class="language-javascript"><code class="language-javascript">
var foo = {
    bar: function () {return this.baz;},
    baz: 1
};
(function () {
    return typeof arguments[0]();
})(foo.bar);
</code></pre>
首先呢，foo是个json对象，foo.bar这个属性就是一个函数定义，foo.bar作为参数，arguments接受这个整体单做函数来执行。(foo.bar只能看做一个函数名)
所以arguments[0]()就相当于 (function () {return this.baz;})();此时的this是window，window没有baz这个属性，自然返回就是 “undefined”。
看这段代码就懂了
5.<pre class="language-javascript"><code class="language-javascript">
var foo = {
    bar: function (xx) {console.log(this == xx);return this;},
    baz: 100
};
(function () {
    console.log(arguments)
    return  arguments[0](arguments);
})(foo.bar);
</code></pre>
// 打印结果 true
所以this就是arguments,然后就明了了
6.<pre class="language-javascript"><code class="language-javascript">
var foo = {
    bar: function () {return this.baz;},
    baz: 1
};
typeof (f = foo.bar)();
</code></pre>
这个和上题一样foo.bar作为一个整体赋值给f，函数执行时this还是指向window。答案：undefined。
7.<pre class="language-javascript"><code class="language-javascript">
var x = 1; 
if (function f() {}) {   
    x += typeof f;
}
x;
</code></pre>
首先呢，函数声明是不能写在运算符的运算过程中，所以f是找不到的，那typeof f 就是undefined   然后字符串再连接，结果就是：”1undefined” 。
虽然上面的程序写法不对，但还是会返回为true。（因为返回为fasle就那么几种情况，其余的都是true）
8.<pre class="language-javascript"><code class="language-javascript">
var x = [typeof x, typeof y][1];
typeof typeof x;
</code></pre>
只看最后一行就行了 ，typeof返回的那几个值都是字符串 ，再把他们typeof一次，那就是string了。
9.<pre class="language-javascript"><code class="language-javascript">
(function (foo) {
    return typeof foo.bar;
})({
    foo: {
        bar: 1
    }
});
</code></pre>
这个闭包自执行里面的实参:json对象foo和形参foo其实没有任何关系，那个形参foo就是整个实参json对象。所以json对象里面第一层没有bar属性，肯定就是返回 undefined 了
如果改为foo.foo.bar的话  那就能返回 “number”了。
10.<pre class="language-javascript"><code class="language-javascript">
(function f() {
    function f() {return 1;}
    return f();
    function f() {return 2;}
})();
</code></pre>
这个就是预编译，后面的f会覆盖前面的f 然后就返回 2 。
11.<pre class="language-javascript"><code class="language-javascript">
function f() {
    return f;
}
new f() instanceof f;
</code></pre>
这个题目的关键是那个  “ return f ”。
因为在构造函数中，如果return一个函数或者对象的话，那这个函数或者对象就会把这个构造函数给覆盖掉。也就是说，new f()之后变成了 f instanceof f，返回的自然是false。
如果是 function f(){return 1;}  那就返回true了
12.with (function(x, undefined){}) length;
with里面是一个函数，函数也是有长度的，而函数的长度呢就是函数形参的集合（arguments是实参的集合）。连个参数  返回2。
13.<pre class="language-javascript"><code class="language-javascript">
function myfunc(){
    alert('hello');
}
myfunc();//输出world
function myfunc(){
    alert('world');//输出world
}
</code></pre>
首先看上面的代码，最终都是输出world。原因在于，javascript的引擎不是一行一行的分析执行代码的，而是一段一段的分析执行的，定义式的函数语句会被提取出来优先执行。函数定义执行完毕后，才会按顺序执行其他语句代码。所以第一次调用myfunc()之前，第一个函数语句定义的代码已经被下面的定义给覆盖掉了。所以才会执行输出“world”的那个函数。
14.<pre class="language-javascript"><code class="language-javascript">
var myName = 'cc';
name = 'chenchen';
output();
function output() {
     alert(myName); //undefined
     alert(name); //chenchen
     var myName = 'ccking';
     name = 'javascript';
     alert(myName); //ccking
     alert(name); //javascript
}
alert(myName); //cc
alert(name); //javascript
</code></pre>
第一个输出的myName，是在一个子作用域中（output函数）输出，js的执行引擎会在当前作用域查找变量，由于预编译时已经把myName初始化为undefined，自然输出为undefined。
而name不是var定义的，相当于window对象的属性，全局使用，不会出错。
再重新定义了myName 和name 所以输出了ccking 和 javascript
在output函数外面，myName的作用域回到根作用域window 依然输出cc;而name属性在output函数中被更改所以输出javascript。
很显然，使用var修饰的myName标识符在函数内外是两个东西外面的‘cc’不会因为output函数内的改为‘ccking’而变化，回到外面依然是cc；name没有var修饰所以就是一个东西，在函数内修改，函数外就会表现出来了。
15.
<pre class="language-javascript"><code class="language-javascript">
alert(Function instanceof Object); // true
alert(Object instanceof Function); // true
alert(Object.forEach); // undefined
Function.prototype.forEach = function(object, block, context) {
    for (var key in object) {
        if (typeof this.prototype[key] == "undefined") {
            block.call(context, object[key], key, object);
        }
    }
};
</pre></code>
给 Function 设置的原型方法 forEach，“有趣”的是 Object 也能够获取。
16.
<pre class="language-javascript"><code class="language-javascript">
function Foo() {};
var foo = new Foo();
alert(foo instanceof Foo); // true
alert(foo instanceof Object); // true
alert(foo instanceof Function); // false
alert(Foo instanceof Function); // true
alert(Foo instanceof Object); // false
</code></pre>
<a href="http://fireboy.sinaapp.com/?attachment_id=" rel="attachment wp-att-160"><img src="http://fireboy-wordpress.stor.sinaapp.com/uploads/2014/09/javascript_object_layout.jpg" alt="" title="javascript_object_layout" width="611" height="760" class="alignnone size-full wp-image-160" /></a>
17.
<pre class="language-javascript"><code class="language-javascript">
function foo(){
        foo.abc = function(){alert('def')}
        this.abc = function(){alert('xyz')}
        abc = function(){alert('@@@@@')};
        var abc = function(){alert('$$$$$$')}
}
foo.prototype.abc = function(){alert('456');}
foo.abc = function(){alert('123');}
var f = new foo();
f.abc();
foo.abc();
abc();
</code></pre>
18.
<pre class="language-javascript"><code class="language-javascript">
alert(1);
setTimeout(function (){
   alert(5)
},10);
setTimeout(function (){
   alert(3)
},10);
alert(2);
setTimeout(function (){
   alert(4)
},10);
//1,2,3,4,5
</code></pre>
19.
<pre class="language-javascript"><code class="language-javascript">
var 弹框 = alert, 函数 = Function;
function 贤心(行为){
弹框('此人正在'+ 行为);
};
函数('贤心("发呆")')();
</code></pre>
20.
<pre class="language-javascript"><code class="language-javascript">
if (!("a" in window)) {
    var a = 1;
}
alert(a)//undefined
</code></pre>
]]></content:encoded>
</item>
<item>
<title>Javascript 小经验</title>
<link>http://fireboy.sinaapp.com/javascript-%e5%b0%8f%e7%bb%8f%e9%aa%8c/</link>
<pubDate>Tue, 30 Sep 2014 05:42:15 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=69</guid>
<description></description>
<content:encoded><![CDATA[1.在创建img时，src不要设置为空或者#，否则会对页面再次发生请求，建议设置为about:blank;
2.逻辑运算符&&和||的“短路”原理，如&&中第一个表达式为假就不会去处理第二个表达式，而||正好相反。在js中有意思的是它们的返回值：
例：var attr = true && 4 && “aaa”;那么运行的结果attr就不是简单的true或这false，而是”aaa” 。
例：var Yahoo = Yahoo||{};经常用来判断一个变量是否已定义，如果没有定义就给他一个初始值。
那么，可以这样优化代码：if(a >=5){alert("你好");}可以写成：a >= 5 && alert("你好");
注：js中||和&&的特性帮我们精简了代码的同时，也带来了代码可读性的降低
3.当发出的请求未收到response时，刷新页面，firefox和chrome会自动中断请求，而IE不会，所以在模拟长连接时多次刷新页面就会因为积累太多请求而遇到IE并发请求数的瓶颈，需要在触发beforeunload事件时手动abort请求来解决
4.Android 2.2 webkit新APIs：navigator.connection.type可以判断当前网络连接的类型；navigator.onLine检测设备是否联网；navigator.isApplicationInstalled检测是否安装某一个本地应用
5. Keep in mind that primitive operations can be faster than function calls. Use VanillaJS.
For example, instead of using…
var min = Math.min(a,b);
A.push(v);
…use…
var min = a < b ? a : b;
A[A.length] = v;
6.
<pre class="language-javascript"><code>// bad
function inbox(messages) {
  items = '<ul>';
  for (i = 0; i < length; i++) {
    items += '<li>' + messages[i].message + '</li>';
  }
  return items + '</ul>';
}
// good
function inbox(messages) {
  items = [];
  for (i = 0; i < length; i++) {
    items[i] = messages[i].message;
  }
  return '<ul><li>' + items.join('</li><li>') + '</li></ul>';
}</code></pre>
7.Assign methods to the prototype object, instead of overwriting the prototype with a new object. Overwriting the prototype makes inheritance impossible: by resetting the prototype you'll overwrite the base!
<pre class="language-javascript"><code>
function Jedi() {
  console.log('new jedi');
}
// bad
Jedi.prototype = {
  fight: function fight() {
    console.log('fighting');
  },
  block: function block() {
    console.log('blocking');
  }
};
// good
Jedi.prototype.fight = function fight() {
  console.log('fighting');
};
Jedi.prototype.block = function block() {
  console.log('blocking');
};
</code></pre>]]></content:encoded>
</item>
<item>
<title>关于cssText属性</title>
<link>http://fireboy.sinaapp.com/%e5%85%b3%e4%ba%8ecsstext%e5%b1%9e%e6%80%a7/</link>
<pubDate>Tue, 30 Sep 2014 05:42:58 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=71</guid>
<description></description>
<content:encoded><![CDATA[给一个html元素设置css属性,传统做法：
<pre class="language-javascript"><code class="language-javascript">
var mybox= document.getElementById("mybox");  
mybox.style.width = "200px";  
mybox.style.height = "70px";  
mybox.style.display = "block"; 
</code></pre>
这样写很烦，尤其是很多的时候，一个样式一行,天啊！
工具函数 :
<pre class="language-javascript"><code class="language-javascript">
function setStyle(obj,css){
  for(var atr in css)
      obj.style[atr] = css[atr];
}
var mybox = document.getElementById("mybox");
setStyle(mybox,{width:"200px",height:"70px",display:"block"}) 
</code></pre>
使用cssText属性,想怎么写就怎么写：
<pre class="language-javascript"><code class="language-javascript">
var mybox = document.getElementById("mybox");  
    mybox.style.cssText="width:200px;height:70px;display:bolck";  
</code></pre>
跟书写CSS一样，还可以支持属性值缩写border:#000 solid 1px;
测试浏览器版本如下(与浏览器模式无关)：
IE 6/7
IE 8 (Emulate IE7)
IE 8 (Enforce IE8)
Opera 10.10
Firefox 3.5.6
Safari 4.0.3
Chrome 4.0.266.0]]></content:encoded>
</item>
<item>
<title>一些常用的正则表达式 </title>
<link>http://fireboy.sinaapp.com/%e4%b8%80%e4%ba%9b%e5%b8%b8%e7%94%a8%e7%9a%84%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f/</link>
<pubDate>Tue, 30 Sep 2014 05:44:38 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=75</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-javascript"><code class="language-javascript">
"^\d+$"　　//非负整数（正整数 + 0） 
"^[0-9]*[1-9][0-9]*$"　　//正整数 
"^((-\d+)|(0+))$"　　//非正整数（负整数 + 0） 
"^-[0-9]*[1-9][0-9]*$"　　//负整数 
"^-?\d+$"　　　　//整数 
"^\d+(\.\d+)?$"　　//非负浮点数（正浮点数 + 0） 
"^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$"　　//正浮点数 
"^((-\d+(\.\d+)?)|(0+(\.0+)?))$"　　//非正浮点数（负浮点数 + 0） 
"^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$"　　//负浮点数 
"^(-?\d+)(\.\d+)?$"　　//浮点数 
^//w+((-//w+)|(//.//w+))*//@[A-Za-z0-9]+((//.|-)[A-Za-z0-9]+)*//.[A-Za-z0-9]+$ 
^#[a-fA-F0-9]{6}          //颜色
^http[s]?://////([//w-]+//.)+[//w-]+([//w-./?%&=]*)?$ //链接
^[//u4E00-//u9FA5//uF900-//uFA2D]+$    //仅中文
^[//x00-//xFF]+$          //仅ACSII字符
^//d{6}$           //邮编
^0{0,1}13[0-9]{9}$         //手机^//d{1,3}//.//d{1,3}//.//d{1,3}.//d{1,3}$    //ip地址
n^//S+$           //非空
(.*)//.(jpg|bmp|gif|ico|pcx|jpeg|tif|png|raw|tga)$ //图片
(.*)//.(rar|zip|7zip|tgz)$        //压缩文件
^//d{4}(//-|///|/.)//d{1,2}//1//d{1,2}$"        //日期
"^[A-Za-z]+$"　　//由26个英文字母组成的字符串 
"^[A-Z]+$"　　//由26个英文字母的大写组成的字符串 
"^[a-z]+$"　　//由26个英文字母的小写组成的字符串 
"^[A-Za-z0-9]+$"　　//由数字和26个英文字母组成的字符串 
"^\w+$"　　//由数字、26个英文字母或者下划线组成的字符串 
"^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$"　　　　//email地址 
"^[a-zA-z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$"　　//url 
/^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-(([0-2]([1-9]{1}))|(3[0|1]))$/ // 年-月-日 
/^((0([1-9]{1}))|(1[1|2]))/(([0-2]([1-9]{1}))|(3[0|1]))/(d{2}|d{4})$/ // 月/日/年 
"^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$" //Emil 
"(d+-)?(d{4}-?d{7}|d{3}-?d{8}|^d{7,8})(-d+)?" //电话号码 
"^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$" //IP地址 
</code></pre>
匹配中文字符的正则表达式： [\u4e00-\u9fa5]
匹配双字节字符(包括汉字在内)：[^\x00-\xff]
匹配空行的正则表达式：\n[\s| ]*\r
匹配HTML标记的正则表达式：/<(.*)>.*<\/\1>|<(.*) \/>/
匹配首尾空格的正则表达式：(^\s*)|(\s*$)
匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
匹配网址URL的正则表达式：^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$
匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
匹配国内电话号码：(\d{3}-|\d{4}-)?(\d{8}|\d{7})?
匹配腾讯QQ号：^[1-9]*[1-9][0-9]*$]]></content:encoded>
</item>
<item>
<title>培养8种让自己受益一生的技能</title>
<link>http://fireboy.sinaapp.com/%e5%9f%b9%e5%85%bb8%e7%a7%8d%e8%ae%a9%e8%87%aa%e5%b7%b1%e5%8f%97%e7%9b%8a%e4%b8%80%e7%94%9f%e7%9a%84%e6%8a%80%e8%83%bd/</link>
<pubDate>Tue, 30 Sep 2014 05:46:02 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=78</guid>
<description></description>
<content:encoded><![CDATA[<h4>1、定位人生的能力</h4>
自我的人生价值和角色定位、人生主要目标的设定等等，简单的说就是：你准备做一个什么样的人，你的人生准备达成哪些目标。这些看似与具体职场压力无关的东西其实对我们的影响却总是十分巨大，对很多职场压力的反思最后往往都要归结到这个方面。卡耐基说：我非常相信，这是获得心理平静的最大秘密之一——要有正确的价值观念。而我也相信，只要我们能定出一种个人的标准来——就是和我们的生活比起来，什么样的事情才值得的标准，我们的忧虑有50%可以立刻消除。
<h4>2、调整心态的能力</h4>
法国作家雨果曾说过：思想可以使天堂变成DY，也可以使DY变成天堂。我们要认识到危机即是转机，遇到困难，产生压力应尽量以正向乐观的态度去面对每一件事。如同有人研究所谓乐观系数，也就是说一个人常保持正向乐观的心，处理问题时，他就会比一般人多出20%的机会得到满意的结果。因此正向乐观的态度不仅会平息由压力而带来的紊乱情绪，也较能使问题导向正面的结果。
<h4>3、自我反省的能力</h4>
对于一个积极进取的人而言，面对业务指标压力时可以自问，如果没做成又如何?这样的想法并非找借口，而是一种有效疏解压力的方式。但如果本身个性较容易趋向于逃避，则应该要求自己以较积极的态度面对压力，告诉自己，适度的压力能够帮助自我成长。
<h4>4、平衡生活的能力</h4>
我们要主动管理自己的情绪，注重业余生活，不要把工作上的压力带回家。留出休整的空间：与他人共享时光，交谈、倾诉、阅读、冥想、听音乐、处理家务、参与体力劳动都是获得内心安宁的绝好方式，选择适宜的运动，锻炼忍耐力、灵敏度或体力……持之以恒地交替应用你喜爱的方式并建立理性的习惯，逐渐体会它对你身心的裨益。
<h4>5、管理时间的能力</h4>
工作压力的产生往往与时间的紧张感相生相伴，总是觉得很多事情十分紧迫，时间不够用。解决这种紧迫感的有效方法是时间管理，关键是不要让你的安排左右你，你要自己安排你的事。在进行时间安排时，应权衡各种事情的优先顺序，要学会弹钢琴.对工作要有前瞻能力，把重要但不一定紧急的事放到首位，防患于未然，如果总是在忙于救火，那将使我们的工作永远处于被动之中。
<h4>6、人际沟通的能力</h4>
平时要积极改善人际关系，特别是要加强与上级、同事及下属的沟通，要随时切记，压力过大时要寻求主管的协助，不要试图一个人就把所有压力承担下来。同时在压力到来时，还可采取主动寻求心理援助，如与家人朋友倾诉交流、进行心理咨询等方式来积极应对。
<h4>7、自我提升的能力</h4>
既然压力的来源是自身对事物的不熟悉、不确定感，或是对于目标的达成感到力不从心所致，那么，疏解压力最直接有效的方法，便是去了解、掌握状况，并且设法提升自身的能力。通过自学、参加培训等途径，一旦会了、熟了、清楚了，压力自然就会减低、消除，可见压力并不是一件可怕的事。逃避之所以不能疏解压力，则是因为本身的能力并未提升，使得既有的压力依旧存在，强度也未减弱。
<h4>8、活在今天的能力</h4>
压力，其实都有一个相同的特质，就是突出表现在对明天和将来的焦虑和担心。而要应对压力，我们首要做的事情不是去观望遥远的将来，而是去做手边的清晰之事，因为为明日作好准备的最佳办法就是集中你所有的智慧、热忱，把今天的工作做得尽善尽美]]></content:encoded>
</item>
<item>
<title>HTML5 Page Visibility</title>
<link>http://fireboy.sinaapp.com/html5-page-visibility/</link>
<pubDate>Tue, 30 Sep 2014 05:57:09 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=82</guid>
<description></description>
<content:encoded><![CDATA[HTMl5 推出了一个很“特别”的 API Page Visibility ，之所以说它特别，是因为这个 API 关注的是一个很少人留意的功能 —— 浏览器标签( tab ) 是否被激活。这里必须解释一下，这个“激活”，指的是这个标签是否正被用户浏览，或者说是否为当前标签。
那么，这个 API 究竟有些什么用途呢？通常，很多传统的页面在用户没有激活它的时候，它还会继续工作，例如，当用户正在浏览新闻门户，而他之前打开的 NBA 球赛页面会继续刷新获取最新结果，视频网站会继续占用带宽加载资源，于是，如果这类不必要的工作太多了，就会造成很多的资源浪费。因此，这货相当有用：
Web 程序每隔一段时间会自动更新页面信息，确保用户获取到及时的信息，但是，当用户正在浏览其他页面时，可以控制它暂停更新。
视频网站在播放在线视频时会不断加载视频，直到视频加载完毕，但是，当用户正在浏览其他页面时，可以暂停加载视频资源，节省带宽。
网站首页上有个大幻灯自动播放，当用户浏览其他页面了，就可以暂停播放。
于是，通过 Page Visibility ，我们可以至少达到以下一种或几种的好处：
节省服务器资源，Ajax 轮询这类服务器资源占用常常会被忽略，关闭这种请求可以节省资源。
节省内存消耗。
节省带宽消耗。
因此，使用 Page Visibility 无论是对于用户还是服务器都有好处。
接下来正式介绍一下这个 API 。Page Visibility 会在浏览器的 document 对象上添加两个属性 hidden 和 visibilityState 。如果当前的标签被激活了，那么 document.hidden 的值为 false ，否则为 true 。visibilityState 则有4个可能值：
hidden：当浏览器最小化、切换标签、电脑锁屏时 visibilityState 值是 hidden
visible：当浏览器最顶级上下文（context）的 document 至少显示在一个屏幕当中时，返回 visible；当浏览器窗口没有最小化，但是浏览器被其他应用遮挡时，这时也为 visible
prerender：当文档被加载到屏幕画面以外或者不可见时返回 prerender，这个是非必要属性，浏览器可选择性的支持。
unloaded：当文档将要被离开 ( unload ） 时返回 unloaded，浏览器也可选择性的支持这个属性
另外，document 上会添加 visibilitychange 事件，当 document 的可见性改变时触发该事件。
这个 Demo 的作用是监听标签的可见性是否改变 ，并且在标签可见性发生改变时产生提示。
值得注意的是，在目前，浏览器对于 Page Visibility 的支持还是通过私有属性支持，因此在检测或利用 Page Visibility 提供的属性时需要加上浏览器私有前缀，例如在 Chrome 中检测上面的 visibilityState 属性时，就需要检测 document.webkitVisibilityState 而不是 document.visibilityState 。所以，Demo 中会首先检测浏览器类型，然后才使用 Page Visibility 的 API 。主要代码如下：
<pre class="language-javascript"><code>
function browerKernel(){
    var result;
    ['webkit', 'moz', 'o', 'ms'].forEach(function(prefix){
        if( typeof document[ prefix + 'Hidden' ] != 'undefined' ){
            result = prefix;
        }
    });
    return result;
}
function init(){
    prefix = browerKernel();
    var showTip = document.getElementById('showTip');
    document.addEventListener( prefix  + 'visibilitychange', function onVisibilityChange(e){
        var tip = null;    
        if( document[ prefix + 'VisibilityState' ] == 'hidden' ) tip = '<p>离开页面</p>';
        else if( document[ prefix + 'VisibilityState' ]  == 'visible' ) tip = '<p>进入页面</p>';
        showTip.innerHTML = showTip.innerHTML + tip;
    });
}
window.onload = init();
</code></pre>]]></content:encoded>
</item>
<item>
<title>HTTP 状态码解释</title>
<link>http://fireboy.sinaapp.com/http-%e7%8a%b6%e6%80%81%e7%a0%81%e8%a7%a3%e9%87%8a/</link>
<pubDate>Tue, 30 Sep 2014 07:26:41 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=86</guid>
<description></description>
<content:encoded><![CDATA[在介绍各种代码之前，首先科普一下，上面的各种代码，是 HTTP 状态码，用以表示网页服务器 HTTP 响应状态的3位数字代码，包含五种状态状态， 1xx 代表消息， 2xx 代表成功， 3xx 代表重定向， 4xx 代表请求错误， 5xx 代表服务器错误。下面 Kayo 为大家详细介绍各个状态码的意义。其中下面各行开头的数字代表各状态码，括号内的内容表示状态信息及其中文翻译，接着是代码含义。
100 (Continue/继续)：请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。HTTP 1.1 中新加入。
101 (Switching Protocols/切换协议)：服务器已经理解了客户端的请求，并将通过 Upgrade 消息头通知客户端采用不同的协议来完成这个请求。HTTP 1.1 中新加入。
200 (OK/正常)：请求已成功，请求所希望的响应头或数据体将随此响应返回。
201 (Created/已创建)：表示服务器在请求的响应中建立了新文档；应在定位头信息中给出它的URL。
202 (Accepted/接受)：已经接受请求，但处理尚未完成。
203 (Non-Authoritative Information/非官方信息)：表示文档被正常的返回，但是由于正在使用的是文档副本所以某些响应头信息可能不正确。 HTTP 1.1 中新加入。
204 (No Content/无内容)：在并没有新文档的情况下，确保浏览器继续显示先前的文档。
205 (Reset Content/重置内容)：意思是虽然没有新文档但浏览器要重置文档显示。这个状态码用于强迫浏览器清除表单域。 HTTP 1.1 中新加入。
206 (Partial Content/局部内容)：在服务器完成了一个包含Range头信息的局部请求时被发送的。 HTTP 1.1 中新加入。
300 (Multiple Choices/多重选择)：表示被请求的文档可以在多个地方找到，并将在返回的文档中列出来。如果服务器有首选设置，首选项将会被列于定位响应头信息中。
301 (Moved Permanently)：指所请求的文档在别的地方；文档新的URL会在定位响应头信息中给出。浏览器会自动连接到新的URL。
302 (Found/找到)：与301有些类似，只是定位头信息中所给的URL应被理解为临时交换地址而不是永久的。注意：在 HTTP 1.0 中，消息是临时移动(Moved Temporarily)的而不是被找到，因此HttpServletResponse中的常量是SC_MOVED_TEMPORARILY不是我们以为的SC_FOUND。
303 (See Other/参见其他信息)：这个状态码和 301、302 相似，只是如果最初的请求是 POST，那么新文档（在定位头信息中给出）药用 GET 找回。 HTTP 1.1 中新加入。
304 (Not Modified/为修正)：客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。
305 (Use Proxy/使用代理)：表示所请求的文档要通过定位头信息中的代理服务器获得。 HTTP 1.1 中新加入。
307 (Temporary Redirect/临时重定向)：和 302 （Found/找到）相同。许多浏览器会错误地响应 302 应答进行重定向，即使原来的请求是 POST ，即使它实际上只能在 POST 请求的应答是 303 时才能重定向。由于这个原因， HTTP 1.1 新增了 307 ，以便更加清除地区分几个状态代码：当出现 303 应答时，浏览器可以跟随重定向的 GET 和 POST 请求；如果是 307 应答，则浏览器只 能跟随对GET请求的重定向。 HTTP 1.1 中新加入。
400 (Bad Request/错误请求)：指出客户端请求中的语法错误。
401 (Unauthorized/未授权)：表示客户端在授权头信息中没有有效的身份信息时访问受到密码保护的页面。这个响应必须包含一个WWW-Authenticate的授权信息头。例如，在本书4.5部分中的“Restricting Access to Web Pages./限制访问Web页。”
403 (Forbidden/禁止)：意思是除非拥有授权否则服务器拒绝提供所请求的资源。这个状态经常会由于服务器上的损坏文件或目录许可而引起。
404 (Not Found/未找到)：无法找到指定位置的资源，相信有一定经验的网络使用者对此都不陌生，它是表示“没有所访问页面”的标准方式。相对于setStatus使用sendError得好处是：服务器会自动生成一个错误页来显示错误信息，也就是我们常说的 404 页面。
熟悉 WordPress 主题开发的童鞋都会知道，在 WordPress 的模板中有专门设计给 404 的页面模板，由此可见设计 404 页面对于一个网站来说有种“标配”的意味了。
405 (Method Not Allowed/方法未允许)：指出请求方法(GET, POST, HEAD, PUT, DELETE, 等)对某些特定的资源不允许使用。 HTTP 1.1 中新加入。
406 (Not Acceptable/无法访问)：表示请求资源的MIME类型与客户端中Accept头信息中指定的类型不一致。 HTTP 1.1 中新加入。
407 (Proxy Authentication Required/代理服务器认证要求)：与401状态有些相似，表示客户必须先经过代理服务器的授权。
408 (Request Timeout/请求超时)：指服务端等待客户端发送请求的时间过长。 HTTP 1.1 中新加入。
409 (Conflict/冲突)：常被用于试图上传版本不正确的文件时。 HTTP 1.1 中新加入。
410 (Gone/已经不存在)：请求的文档已经不存在并且没有更新的地址。 410 状态不同于 404 ， 410 是在指导文档已被移走的情况下使用，而404则用于未知原因的无法访问。 HTTP 1.1 中新加入。
411 (Length Required/需要数据长度)：表示服务器不能处理请求（假设为带有附件的POST请求），除非客户端发送 Content-Length 头信息指出发送给服务器的数据的大小。 HTTP 1.1 中新加入。
412 (Precondition Failed/先决条件错误)：该状态指出请求头信息中的某些先决条件是错误的。 HTTP 1.1 中新加入。
413 (Request Entity Too Large/请求实体过大)：告诉客户端现在所请求的文档比服务器现在想要处理的要大。如果服务器认为能够过一段时间处理，则会包含一个 Retry-After 的响应头信息。 HTTP 1.1 中新加入。
414 (Request URI Too Long/请求URI过长)：用于在URI过长的情况时。这里所指的“URI”是指URL中主机、域名及端口号之后的内容。例如： http://kayosite.com:8080/aaa/bbb/ccc ，其中“URL”是指/aaa/bbb/ccc。 HTTP 1.1 中新加入。
415 (Unsupported Media Type/不支持的媒体格式)：意味着请求所带的附件的格式类型服务器不知道如何处理。 HTTP 1.1 中新加入。
416 (Requested Range Not Satisfiable/请求范围无法满足)：表示服务器不能满足客户在请求中指定的Range头。 HTTP 1.1 中新加入。
417 (Expectation Failed/期望失败)：如果服务器得到一个带有100-continue值的Expect请求头信息，这是指客户端正在询问是否可以在后面的请求中发送附件。在这种情况下，服务器也会用该状态(417)告诉浏览器服务器不接收该附件或用100 (SC_CONTINUE)状态告诉客户端可以继续发送附件。 HTTP 1.1 中新加入。
500 (Internal Server Error/内部服务器错误)：这是常见的“服务器错误”状态。表示服务器遇到了意料不到的情况，不能完成客户的请求。
501 (Not Implemented/未实现)：告诉客户端服务器不支持请求中要求的功能。
502 (Bad Gateway/错误的网关)：用于充当代理或网关的服务器；该状态指出接收服务器接收到远端服务器的错误响应。
503 (Service Unavailable/服务无法获得)：表示服务器由于在维护或已经超载而无法响应。
504 (Gateway Timeout/网关超时)：由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。 HTTP 1.1 中新加入。
505 (HTTP Version Not Supported/不支持的 HTTP 版本)：该状态码是说服务器并不支持在请求中所标明 HTTP 版本。 HTTP 1.1 中新加入。]]></content:encoded>
</item>
<item>
<title>一些难解的javascript语法特性2</title>
<link>http://fireboy.sinaapp.com/%e4%b8%80%e4%ba%9b%e9%9a%be%e8%a7%a3%e7%9a%84javascript%e8%af%ad%e6%b3%95%e7%89%b9%e6%80%a72/</link>
<pubDate>Wed, 01 Oct 2014 14:10:24 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=92</guid>
<description></description>
<content:encoded><![CDATA[1.
<pre class="language-javascript"><code class="language-javascript">
function a(x) {
    return x * 2;
}
var a;
alert(a);
</code></pre>
2.
<pre class="language-javascript"><code class="language-javascript">
function a() {
    alert(this);
}
a.call(null)
</code></pre>
3.
<pre class="language-javascript"><code class="language-javascript">
console.log("Why am I a " + typeof + "");
</code></pre>
4.
<pre class="language-javascript"><code class="language-javascript">
console.log(++[[]][+[]]);//1
</code></pre>
5.
<pre class="language-javascript"><code class="language-javascript">
console.log(1234['toString']['length']);//1
console.log({1:2}.toString().length);//15
console.log([1].toString().length);//1
console.log([1,4].toString().length);//3
</code></pre>
6.
<pre class="language-javascript"><code class="language-javascript">
(function(){
console.log(typeof arguments);
return typeof arguments;
})();
</code></pre>
不能显式创建 arguments 对象。arguments 对象只有函数开始时才可用。函数的 arguments 对象并不是一个数组，访问单个参数的方式与访问数组元素的方式相同。索引 n 实际上是 arguments 对象的 0…n 属性的其中一个参数。
由上面可以知道arguments不是一个数组，只不过元素的访问方式与数组相同，它是一个使用于函数体中的对象，用来管理函数的实际参数。
所以这道题目的答案是 object ；
7.
<pre class="language-javascript"><code class="language-javascript">
var x=10;
var foo = {
    x:20,
    bar:function(){
    var x = 30;
    return this.x;
    }
}
var a = foo.bar();
var b = (foo.bar)();
var c = (foo.bar=foo.bar)();
var d = (foo.bar,foo.bar)();
console.log(a,b,c,d);//20,20,10,10
</code></pre>
(foo.bar=foo.bar) 这是一个表达式，得出的是返回的值 value，即foo.bar的函数对象，而不是引用 Reference，就像这样一个写法：
var x = 10; (function() { return this.x; })();
，括号里面是函数的值，this指向是window（可以通过上面的ECMA语言规范链接查看原理），所以打印出来的是 10；]]></content:encoded>
</item>
<item>
<title>wordpress更改域名之后无法访问的完美解决办法</title>
<link>http://fireboy.sinaapp.com/wordpress%e6%9b%b4%e6%94%b9%e5%9f%9f%e5%90%8d%e4%b9%8b%e5%90%8e%e6%97%a0%e6%b3%95%e8%ae%bf%e9%97%ae%e7%9a%84%e5%ae%8c%e7%be%8e%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95/</link>
<pubDate>Fri, 03 Oct 2014 05:22:29 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=99</guid>
<description></description>
<content:encoded><![CDATA[最近在做项目的时候，碰到一个客户的域名有问题，解析自动失效了，然后客户自己修改了域名的解析，结果导致网站无法使用了。其实这个问题再wordpress的使用者中来说，也是老生常谈的一个问题了。
记得很久以前，网上给出的方法是直接在数据库中修改，小编个人觉得这种方法对大部分人都不可是，数据库只要一不小心就会出现很大的问题。这里我们给出最好的方法来解决。
找到你现在所使用的主题，在主题目录中找到functions.php，在这个文件中加入以下代码：
update_option(‘siteurl’,’http://你的新域名’);
update_option(‘home’,’http://你的新域名’);
将上面的代码粘贴到functions.php 中，将单引号修改为英文单引号，将后面的域名修改为你的新域名，保存 上传覆盖，现在打开你的网站是不是能够进入了呢？  现在马上进入后台 点击设置–常规   在后台的地址修改为现在的新域名，保存，然后将刚刚添加进functions.php的两段代码删除，大功告成！
<img src="http://www.themepark.com.cn/wp-content/uploads/2013/08/themepark-wenz.jpg" alt="">
以后再域名更改的时候，还是要注意首先在后台修改url，再做域名解析，这个方法只是在紧急时候使用。

这个方法是最简便，最有效的，不需要修改其他的wordpress文件，而是针对主题做修改，所以即使出错也不会影响任何数据和程序。
至于其他的方法，多多少少有一些问题，比如修改wordpress根目录的wp-config.php 指向域名，添加之后wordpress3.52在后台会锁定url，无法修改，也就是定死了。
修改数据库，小编在这里不推荐不熟悉数据库的朋友修改，网上的一些方式不见得是正确的，涉及数据库，大家还是要格外谨慎，以防止数据出错，那就得不偿失了。]]></content:encoded>
</item>
<item>
<title>Javascript 操作select控件大全（新增、修改、删除、选中、清空、判断存在等）</title>
<link>http://fireboy.sinaapp.com/javascript-%e6%93%8d%e4%bd%9cselect%e6%8e%a7%e4%bb%b6%e5%a4%a7%e5%85%a8%ef%bc%88%e6%96%b0%e5%a2%9e%e3%80%81%e4%bf%ae%e6%94%b9%e3%80%81%e5%88%a0%e9%99%a4%e3%80%81%e9%80%89%e4%b8%ad%e3%80%81%e6%b8%85/</link>
<pubDate>Sat, 04 Oct 2014 03:20:29 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=102</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-javascript"><code class="language-javascript">
// 1.判断select选项中 是否存在Value="paraValue"的Item        
function jsSelectIsExitItem(objSelect, objItemValue) {        
    var isExit = false;        
    for (var i = 0; i < objSelect.options.length; i++) {        
        if (objSelect.options[i].value == objItemValue) {        
            isExit = true;        
            break;        
        }        
    }        
    return isExit;        
}         
   
// 2.向select选项中 加入一个Item        
function jsAddItemToSelect(objSelect, objItemText, objItemValue) {        
    //判断是否存在        
    if (jsSelectIsExitItem(objSelect, objItemValue)) {        
        alert("该Item的Value值已经存在");        
    } else {        
        var varItem = new Option(objItemText, objItemValue);      
        objSelect.options.add(varItem);     
        alert("成功加入");     
    }        
}        
   
// 3.从select选项中 删除一个Item        
function jsRemoveItemFromSelect(objSelect, objItemValue) {        
    //判断是否存在        
    if (jsSelectIsExitItem(objSelect, objItemValue)) {        
        for (var i = 0; i < objSelect.options.length; i++) {        
            if (objSelect.options[i].value == objItemValue) {        
                objSelect.options.remove(i);        
                break;        
            }        
        }        
        alert("成功删除");        
    } else {        
        alert("该select中 不存在该项");        
    }        
}    
   
   
// 4.删除select中选中的项    
function jsRemoveSelectedItemFromSelect(objSelect) {        
    var length = objSelect.options.length - 1;    
    for(var i = length; i >= 0; i--){    
        if(objSelect[i].selected == true){    
            objSelect.options[i] = null;    
        }    
    }    
}      
   
// 5.修改select选项中 value="paraValue"的text为"paraText"        
function jsUpdateItemToSelect(objSelect, objItemText, objItemValue) {        
    //判断是否存在        
    if (jsSelectIsExitItem(objSelect, objItemValue)) {        
        for (var i = 0; i < objSelect.options.length; i++) {        
            if (objSelect.options[i].value == objItemValue) {        
                objSelect.options[i].text = objItemText;        
                break;        
            }        
        }        
        alert("成功修改");        
    } else {        
        alert("该select中 不存在该项");        
    }        
}        
   
// 6.设置select中text="paraText"的第一个Item为选中        
function jsSelectItemByValue(objSelect, objItemText) {            
    //判断是否存在        
    var isExit = false;        
    for (var i = 0; i < objSelect.options.length; i++) {        
        if (objSelect.options[i].text == objItemText) {        
            objSelect.options[i].selected = true;        
            isExit = true;        
            break;        
        }        
    }              
    //Show出结果        
    if (isExit) {        
        alert("成功选中");        
    } else {        
        alert("该select中 不存在该项");        
    }        
}        
   
// 7.设置select中value="paraValue"的Item为选中    
document.all.objSelect.value = objItemValue;    
       
// 8.得到select的当前选中项的value    
var currSelectValue = document.all.objSelect.value;    
       
// 9.得到select的当前选中项的text    
var currSelectText = document.all.objSelect.options[document.all.objSelect.selectedIndex].text;    
       
// 10.得到select的当前选中项的Index    
var currSelectIndex = document.all.objSelect.selectedIndex;    
       
// 11.清空select的项    
document.all.objSelect.options.length = 0;   
</code></pre>]]></content:encoded>
</item>
<item>
<title>js获取网页选中部分的内容，包含html代码</title>
<link>http://fireboy.sinaapp.com/js%e8%8e%b7%e5%8f%96%e7%bd%91%e9%a1%b5%e9%80%89%e4%b8%ad%e9%83%a8%e5%88%86%e7%9a%84%e5%86%85%e5%ae%b9%ef%bc%8c%e5%8c%85%e5%90%abhtml%e4%bb%a3%e7%a0%81/</link>
<pubDate>Sat, 04 Oct 2014 03:23:04 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=104</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-javascript"><code class="language-javascript">function getSelectedContents(){
    if (window.getSelection) { //chrome,firefox,opera
        var range=window.getSelection().getRangeAt(0);
        var container = document.createElement('div');
        container.appendChild(range.cloneContents());
        return container.innerHTML;
        //return window.getSelection(); //只复制文本
    }
    else if (document.getSelection) { //其他
        var range=window.getSelection().getRangeAt(0);
        var container = document.createElement('div');
        container.appendChild(range.cloneContents());
        return container.innerHTML;
        //return document.getSelection(); //只复制文本
    }
    else if (document.selection) { //IE特有的
        return document.selection.createRange().htmlText;
        //return document.selection.createRange().text; //只复制文本
    }
} 
</code></pre>]]></content:encoded>
</item>
<item>
<title>mobile safari 下overflow:auto的解决方法</title>
<link>http://fireboy.sinaapp.com/mobile-safari-%e4%b8%8boverflowauto%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95/</link>
<pubDate>Sat, 04 Oct 2014 03:32:47 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=108</guid>
<description></description>
<content:encoded><![CDATA[这次有个项目需要完全支持ipad，中间还是遇到了不少的问题。今天有个div需要滚动条在ipad的safari下面失效，mobile safari因为多点触摸的缘故取消了局部区域的滚动条（为了防止和默认的拖动行为冲突）。首先排除了是不是本身布局问题造成的，为此建了一个简单的页面进行测试依然失效，google发现还真是有这样的问题，google reader上也是失效的，mobile safari为此需要使用两个手指才能完成滚动局部的行为。
为了解决这样的问题继续google，最后发现了上述的一篇文章，使用mobile safari的touchmove事件模拟滚动条的效果。废话不多说代码如下：
<pre class="language-javascript"><code class="language-javascript">
function isTouchDevice(){
try{
document.createEvent("TouchEvent");
return true;
}catch(e){
return false;
}
}
function touchScroll(id){
if(isTouchDevice()){ //if touch events exist...
var el=document.getElementById(id);
var scrollStartPos=0;
 
document.getElementById(id).addEventListener("touchstart", function(event) {
scrollStartPos=this.scrollTop+event.touches[0].pageY;
event.preventDefault();
},false);
 
document.getElementById(id).addEventListener("touchmove", function(event) {
this.scrollTop=scrollStartPos-event.touches[0].pageY;
event.preventDefault();
},false);
}
}
//最后使用
touchScroll("MyElement"); //将你需要overflow:auto的元素id调用这个方法即可。
</code></pre>]]></content:encoded>
</item>
<item>
<title>高亮显示搜索到的关键字</title>
<link>http://fireboy.sinaapp.com/%e9%ab%98%e4%ba%ae%e6%98%be%e7%a4%ba%e6%90%9c%e7%b4%a2%e5%88%b0%e7%9a%84%e5%85%b3%e9%94%ae%e5%ad%97/</link>
<pubDate>Sat, 04 Oct 2014 11:05:36 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=111</guid>
<description></description>
<content:encoded><![CDATA[//高亮显示搜索到的关键字
<pre class="language-javascript"><code>
function HeightLight(Keyword){
//文本选择器
var TextRange;
//是否找到
var Found=false;
//找到的次数
var Count = 0;
TextRange = document.body.createTextRange();
Found = TextRange.findText(Keyword);
if (Found){
Count++;
}
while (Found && Count > 0){
TextRange.pasteHTML('<span style="background:yellow">' + Keyword + '</span>');
//将滚动条定位到第一次查到的视口范围内
if(Count==1){
TextRange.scrollIntoView();
}
//继续查找
Found = TextRange.findText(Keyword);
if (!Found){
Count = 0;
}else{
Count++;
}
}
}
//正则式法
function highLight(ele,keys) { 
var reg = new RegExp("(" + keys.replace(/,/,"|") + ")","g"); 
ele.innerHTML = ele.innerHTML.replace(reg,"<font color=\"red\">$1</font>"); 
}  
</code></pre>]]></content:encoded>
</item>
<item>
<title>JS实现复制到剪切板</title>
<link>http://fireboy.sinaapp.com/js_clipboarddata/</link>
<pubDate>Sat, 04 Oct 2014 19:28:55 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=119</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-markup"><code class="language-markup">
 &lt;div id="f">window.clipboardData&lt;/div>
</code></pre>
<pre class="language-javascript"><code class="language-javascript">
function copy_code(copyText) {
   if (window.clipboardData){
       window.clipboardData.setData("Text", copyText)
   }else{
       var flashcopier = 'flashcopier';
       if(!document.getElementById(flashcopier)){
         var divholder = document.createElement('div');
         divholder.id = flashcopier;
         document.body.appendChild(divholder);
       }
       document.getElementById(flashcopier).innerHTML = '';
       var divinfo = '<embed src="../js/_clipboard.swf" FlashVars="clipboard='+encodeURIComponent(copyText)+'" width="0" height="0" type="application/x-shockwave-flash"></embed>';
       document.getElementById(flashcopier).innerHTML = divinfo;
   }
   alert('copy成功！');
}
</code></pre>]]></content:encoded>
</item>
<item>
<title>js颜色选择器</title>
<link>http://fireboy.sinaapp.com/js%e9%a2%9c%e8%89%b2%e9%80%89%e6%8b%a9%e5%99%a8/</link>
<pubDate>Mon, 06 Oct 2014 03:38:08 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=121</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-markup"><code class="language-markup">
&lt;input type="text" name="color" id="color" onclick="coloropen(event)"/> &lt;/p> 
&lt;input type="button" value="颜色选择" onclick="coloropen(event)" id="inputcolor" /> 
&lt;div id="colorpane" style="position:absolute;z-index:999;display:none;">&lt;/div> 
</code></pre>
<pre class="language-javascript"><code class="language-javascript">
var ColorHex = new Array('00', '33', '66', '99', 'CC', 'FF')
var SpColorHex = new Array('FF0000', '00FF00', '0000FF', 'FFFF00', '00FFFF', 'FF00FF')
var current = null
function initcolor(evt){
    var colorTable = ''
    for (i = 0; i < 2; i++){
        for (j = 0; j < 6; j++){
            colorTable = colorTable + '<tr height=15>'
            colorTable = colorTable + '<td width=15 style="background-color:#000000">'
            if (i == 0){
                colorTable = colorTable + '<td width=15 style="cursor:pointer;background-color:#' + ColorHex[j] + ColorHex[j] + ColorHex[j] + '" onclick="doclick(\'#' + SpColorHex[j] + '\')">'
            }else {
                colorTable = colorTable + '<td width=15 style="cursor:pointer;background-color:#' + SpColorHex[j] + '" onclick="doclick(\'#' + SpColorHex[j] + '\')">'
            }
            colorTable = colorTable + '<td width=15 style="background-color:#000000">'
            for (k = 0; k < 3; k++){
                for (l = 0; l < 6; l++){
                    colorTable = colorTable + '<td width=15 style="cursor:pointer;background-color:#' + ColorHex[k + i * 3] + ColorHex[l] + ColorHex[j] + '" onclick="doclick(\'#' + SpColorHex[j] + '\')">'
                }
            }
        }
    }
    colorTable = '<table border="1" cellspacing="0" cellpadding="0" style="text-align:center;cursor:pointer;border-collapse:collapse" bordercolor="000000" >'
    + '<tr><td colspan="21"><span style="float:right;margin-right:5px;cursor:pointer;" onclick="colorclose()">×关闭</span><span style="float:right;margin-right:5px;cursor:pointer;" onclick="defaultColor()">默认颜色</span></td></tr>'
    + colorTable + '</table>';
    document.getElementById("colorpane").innerHTML = colorTable;
    var current_x = document.getElementById("inputcolor").offsetLeft;
    var current_y = document.getElementById("inputcolor").offsetTop;
    document.getElementById("colorpane").style.left = current_x + "px";
    document.getElementById("colorpane").style.top = current_y + "px";
}
function doclick(colorValue) {
    document.getElementById('color').value = colorValue;
    document.getElementById("colorpane").style.display = "none";
}
function defaultColor() {
    document.getElementById('color').value = '';
    document.getElementById("colorpane").style.display = "none";
}
function colorclose() {
    document.getElementById("colorpane").style.display = "none";
}
function coloropen() {
    document.getElementById("colorpane").style.display = "";
}
window.onload = initcolor;
</code></pre>]]></content:encoded>
</item>
<item>
<title>兼容多种浏览器的Ctrl+Enter提交--兼容firefox、ie、opera</title>
<link>http://fireboy.sinaapp.com/ctrl-enter/</link>
<pubDate>Mon, 06 Oct 2014 03:40:17 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=124</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-javascript"><code class="language-javascript">
function isKeyTrigger(e,keyCode){
    var argv = isKeyTrigger.arguments;
    var argc = isKeyTrigger.arguments.length;
    var bCtrl = false;
    if(argc > 2){
        bCtrl = argv[2];
    }
    var bAlt = false;
    if(argc > 3){
        bAlt = argv[3];
    }
    var nav4 = window.Event ? true : false;
    if(typeof e == 'undefined') {
        e = event;
    }
    if( bCtrl && 
        !((typeof e.ctrlKey != 'undefined') ? 
            e.ctrlKey : e.modifiers & Event.CONTROL_MASK > 0)){
        return false;
    }
    if( bAlt && 
        !((typeof e.altKey != 'undefined') ? 
            e.altKey : e.modifiers & Event.ALT_MASK > 0)){
        return false;
    }
    var whichCode = 0;
    if (nav4) whichCode = e.which;
    else if (e.type == "keypress" || e.type == "keydown")
        whichCode = e.keyCode;
    else whichCode = e.button;
    return (whichCode == keyCode);
}
function ctrlEnter(e){
    var ie =navigator.appName=="Microsoft Internet Explorer"?true:false; 
    if(ie){
        if(event.ctrlKey && window.event.keyCode==13){doSomething();}
    }else{
        if(isKeyTrigger(e,13,true)){doSomething();}
    }
}
function doSomething(){document.frmTest.btn_insert.click(); }
</code></pre>]]></content:encoded>
</item>
<item>
<title>JS日期选择器</title>
<link>http://fireboy.sinaapp.com/js_datepicker/</link>
<pubDate>Mon, 06 Oct 2014 03:45:12 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=126</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-markup"><code class="language-markup">
&lt;input type="text" style="border:1px solid #999;" onclick="fPopCalendar(event,this,this)" onfocus="this.select()" readonly="readonly" />
</code></pre>
<pre class="language-javascript"><code class="language-javascript">
var gMonths=new Array("一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月");
var WeekDay=new Array("日","一","二","三","四","五","六");
var strToday="今天";
var strYear="年";
var strMonth="月";
var strDay="日";
var splitChar="-";
var startYear=2000;
var endYear=2050;
var dayTdHeight=12;
var dayTdTextSize=12;
var gcNotCurMonth="#E0E0E0";
var gcRestDay="#FF0000";
var gcWorkDay="#444444";
var gcMouseOver="#79D0FF";
var gcMouseOut="#F4F4F4";
var gcToday="#444444";
var gcTodayMouseOver="#6699FF";
var gcTodayMouseOut="#79D0FF";
var gdCtrl=new Object();
var goSelectTag=new Array();
var gdCurDate=new Date();
var giYear=gdCurDate.getFullYear();
var giMonth=gdCurDate.getMonth()+1;
var giDay=gdCurDate.getDate();
function $(){var elements=new Array();for(var i=0;i<arguments.length;i++) {var element=arguments[i];if(typeof(arguments[i])=='string'){element=document.getElementById(arguments[i]);}if(arguments.length==1){return element;}elements.Push(element);}return elements;}
Array.prototype.Push=function(){var startLength=this.length;for(var i=0;i<arguments.length;i++){this[startLength+i]=arguments[i];}return this.length;}
String.prototype.HexToDec=function(){return parseInt(this,16);}
String.prototype.cleanBlank=function(){return this.isEmpty()?"":this.replace(/\s/g,"");}
function checkColor(){var color_tmp=(arguments[0]+"").replace(/\s/g,"").toUpperCase();var model_tmp1=arguments[1].toUpperCase();var model_tmp2="rgb("+arguments[1].substring(1,3).HexToDec()+","+arguments[1].substring(1,3).HexToDec()+","+arguments[1].substring(5).HexToDec()+")";model_tmp2=model_tmp2.toUpperCase();if(color_tmp==model_tmp1 ||color_tmp==model_tmp2){return true;}return false;}
function $V(){return $(arguments[0]).value;}
function fPopCalendar(evt,popCtrl,dateCtrl){evt.cancelBubble=true;gdCtrl=dateCtrl;fSetYearMon(giYear,giMonth);var point=fGetXY(popCtrl);with($("calendardiv").style){left=point.x+"px";top=(point.y+popCtrl.offsetHeight+1)+"px";visibility='visible';zindex='99';position='absolute';}$("calendardiv").focus();}
function fSetDate(iYear,iMonth,iDay){var iMonthNew=new String(iMonth);var iDayNew=new String(iDay);if(iMonthNew.length<2){iMonthNew="0"+iMonthNew;}if(iDayNew.length<2){iDayNew="0"+iDayNew;}gdCtrl.value=iYear+splitChar+iMonthNew+splitChar+iDayNew;fHideCalendar();}
function fHideCalendar(){$("calendardiv").style.visibility="hidden";for(var i=0;i<goSelectTag.length;i++){goSelectTag[i].style.visibility="visible";}goSelectTag.length=0;}
function fSetSelected(){var iOffset=0;var iYear=parseInt($("tbSelYear").value);var iMonth=parseInt($("tbSelMonth").value);var aCell=$("cellText"+arguments[0]);aCell.bgColor=gcMouseOut;with(aCell){var iDay=parseInt(innerHTML);if(checkColor(style.color,gcNotCurMonth)){iOffset=(innerHTML>10)?-1:1;}iMonth+=iOffset;if(iMonth<1){iYear--;iMonth=12;}else if(iMonth>12){iYear++;iMonth=1;}}fSetDate(iYear,iMonth,iDay);}
function Point(iX,iY){this.x=iX;this.y=iY;}
function fBuildCal(iYear,iMonth){var aMonth=new Array();for(var i=1;i<7;i++){aMonth[i]=new Array(i);}var dCalDate=new Date(iYear,iMonth-1,1);var iDayOfFirst=dCalDate.getDay();var iDaysInMonth=new Date(iYear,iMonth,0).getDate();var iOffsetLast=new Date(iYear,iMonth-1,0).getDate()-iDayOfFirst+1;var iDate=1;var iNext=1;for(var d=0;d<7;d++){aMonth[1][d]=(d<iDayOfFirst)?(iOffsetLast+d)*(-1):iDate++;}for(var w=2;w<7;w++){for(var d=0;d<7;d++){aMonth[w][d]=(iDate<=iDaysInMonth)?iDate++:(iNext++)*(-1);}}return aMonth;}
function fDrawCal(iYear,iMonth,iCellHeight,iDateTextSize){var colorTD=" bgcolor='"+gcMouseOut+"' bordercolor='"+gcMouseOut+"'";var styleTD=" valign='middle' align='center' style='height:"+iCellHeight+"px;font-weight:bolder;font-size:"+iDateTextSize+"px;";var dateCal="";dateCal+="<tr>";for(var i=0;i<7;i++){dateCal+="<td"+colorTD+styleTD+"color:#990099'>"+WeekDay[i]+"</td>";}dateCal+="</tr>";for(var w=1;w<7;w++){dateCal+="<tr>";for(var d=0;d<7;d++){var tmpid=w+""+d;dateCal+="<td"+styleTD+"cursor:pointer;' onclick='fSetSelected("+tmpid+")'>";dateCal+="<span id='cellText"+tmpid+"'></span>";dateCal+="</td>";}dateCal+="</tr>";}return dateCal;}
function fUpdateCal(iYear,iMonth){var myMonth=fBuildCal(iYear,iMonth);var i=0;for(var w=1;w<7;w++){for(var d=0;d<7;d++){with($("cellText"+w+""+d)){parentNode.bgColor=gcMouseOut;parentNode.borderColor=gcMouseOut;parentNode.onmouseover=function(){this.bgColor=gcMouseOver;};parentNode.onmouseout=function(){this.bgColor=gcMouseOut;};if(myMonth[w][d]<0){style.color=gcNotCurMonth;innerHTML=Math.abs(myMonth[w][d]);}else{style.color=((d==0)||(d==6))?gcRestDay:gcWorkDay;innerHTML=myMonth[w][d];if(iYear==giYear && iMonth==giMonth && myMonth[w][d]==giDay){style.color=gcToday;parentNode.bgColor=gcTodayMouseOut;parentNode.onmouseover=function(){this.bgColor=gcTodayMouseOver;};parentNode.onmouseout=function(){this.bgColor=gcTodayMouseOut;};}}}}}}
function fSetYearMon(iYear,iMon){$("tbSelMonth").options[iMon-1].selected=true;for(var i=0;i<$("tbSelYear").length;i++){if($("tbSelYear").options[i].value==iYear){$("tbSelYear").options[i].selected=true;}}fUpdateCal(iYear,iMon);}
function fPrevMonth(){var iMon=$("tbSelMonth").value;var iYear=$("tbSelYear").value;if(--iMon<1){iMon=12;iYear--;}fSetYearMon(iYear,iMon);}
function fNextMonth(){var iMon=$("tbSelMonth").value;var iYear=$("tbSelYear").value;if(++iMon>12){iMon=1;iYear++;}fSetYearMon(iYear,iMon);}
function fGetXY(aTag){var oTmp=aTag;var pt=new Point(0,0);do{pt.x+=oTmp.offsetLeft;pt.y+=oTmp.offsetTop;oTmp=oTmp.offsetParent;}while(oTmp.tagName.toUpperCase()!="BODY");return pt;}
function getDateDiv(){var noSelectForIE="";var noSelectForFireFox="";if(document.all){noSelectForIE="onselectstart='return false;'";}else{noSelectForFireFox="-moz-user-select:none;";}var dateDiv="";dateDiv+="<div id='calendardiv' onclick='event.cancelBubble=true' "+noSelectForIE+" style='"+noSelectForFireFox+"position:absolute;z-index:99;visibility:hidden;border:1px solid #999999;'>";dateDiv+="<table border='0' bgcolor='#E0E0E0' cellpadding='1' cellspacing='1' >";dateDiv+="<tr>";dateDiv+="<td><input type='button' id='PrevMonth' value='<' style='height:20px;width:20px;font-weight:bolder;' onclick='fPrevMonth()'>";dateDiv+="</td><td><select id='tbSelYear' style='border:1px solid;' onchange='fUpdateCal($V(\"tbSelYear\"),$V(\"tbSelMonth\"))'>";for(var i=startYear;i<endYear;i++){dateDiv+="<option value='"+i+"'>"+i+strYear+"</option>";}dateDiv+="</select></td><td>";dateDiv+="<select id='tbSelMonth' style='border:1px solid;' onchange='fUpdateCal($V(\"tbSelYear\"),$V(\"tbSelMonth\"))'>";for(var i=0;i<12;i++){dateDiv+="<option value='"+(i+1)+"'>"+gMonths[i]+"</option>";}dateDiv+="</select></td><td>";dateDiv+="<input type='button' id='NextMonth' value='>' style='height:20px;width:20px;font-weight:bolder;' onclick='fNextMonth()'>";dateDiv+="</td>";dateDiv+="</tr><tr>";dateDiv+="<td align='center' colspan='4'>";dateDiv+="<div style='background-color:#cccccc'><table width='100%' border='0' cellpadding='3' cellspacing='1'>";dateDiv+=fDrawCal(giYear,giMonth,dayTdHeight,dayTdTextSize);dateDiv+="</table></div>";dateDiv+="</td>";dateDiv+="</tr><tr><td align='center' colspan='4' nowrap>";dateDiv+="<span style='cursor:pointer;font-weight:bolder;' onclick='fSetDate(giYear,giMonth,giDay)' onmouseover='this.style.color=\""+gcMouseOver+"\"' onmouseout='this.style.color=\"#000000\"'>"+strToday+":"+giYear+strYear+giMonth+strMonth+giDay+strDay+"</span>";dateDiv+="</tr></tr>";dateDiv+="</table></div>";return dateDiv;}
with(document){onclick=fHideCalendar;write(getDateDiv());}
</code></pre>]]></content:encoded>
</item>
<item>
<title>获取css样式表内样式的js函数currentStyle(IE),defaultView(FF)</title>
<link>http://fireboy.sinaapp.com/getstyle/</link>
<pubDate>Mon, 06 Oct 2014 04:54:42 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=130</guid>
<description></description>
<content:encoded><![CDATA[jS从样式表取值的函数，IE中以currentStyle,firefox中defaultView来获取，需要的朋友可以参考下。
可是DOM.style这种写法只能访问&lt;DOM&gt;&lt;/DOM&gt;，这样在标签里内置的样式，如果样式写在&lt;style type="text/css"&gt;&lt;/style&gt;，或者.css文件里，那么就没有办法读到样式了。
其实呢，还有别的方法可以读到这些样式信息，方法有两种，一种是通过document.styleSheets对象，另一种是通过“最终样式”对象。其中 IE中这个对象叫做currentStyle,FF中这个对象叫做document.defaultView。我将这两个类打包了一下，做了一个用于访问 样式信息的函数，如下：
<pre class="language-javascript"><code class="language-javascript">
function returnStyle(obj,styleName){
var myObj = typeof obj == "string" ? document.getElementById(obj) : obj;
if(document.all){
return eval("myObj.currentStyle." + styleName);
} else {
return eval("document.defaultView.getComputedStyle(myObj,null)." + styleName);
}
}
</code></pre>
函数有两个参数：
obj：访问的对象，类型为DOM对象，或者是对象的id;
styleName： 需要访问的样式名称。类型为string,但是名称不能用"-"号，要用像style.对象的属性名一样的大小写混写名称，例如background-color要写成backgroundColor。
函数返回值为 string类型。
注意：这个方法只能访问样式文件，不能写。如果要写样式，还是要用DOM.style.XXX的方法。另外，FF下有些样式访问有问题，例如padding,margin。如果样式中设置了padding,margin等值，我们可以用marginLeft来返回值。
代码如下:
<pre class="language-css"><code class="language-css">
#demo{background-color:#000;padding:10px;color:#fff;width:200px;}
</code></pre>
<pre class="language-javascript"><code class="language-javascript">
&lt;script type="text/javascript">
function returnStyle(obj,styleName){
var myObj = typeof obj == "string" ? document.getElementById(obj) : obj;
if(document.all){
return eval("myObj.currentStyle." + styleName);
} else {
return eval("document.defaultView.getComputedStyle(myObj,null)." + styleName);
}
}
&lt;/script>
</code></pre>
<pre class="language-markup"><code class="language-markup">
&lt;div id="demo">这里是测试内容&lt;/div>
&lt;a href="###" onclick="alert(returnStyle('demo','width'));">点击测试&lt;/a>
</code></pre>
<pre class="language-javascript"><code class="language-javascript">
function getStyle( elem, name ) {
//如果该属性存在于style[]中，则它最近被设置过(且就是当前的)
if (elem.style[name]){
return elem.style[name];
}
//否则，尝试IE的方式
else if (elem.currentStyle){
return elem.currentStyle[name];
}
//或者W3C的方法，如果存在的话
else if (document.defaultView && document.defaultView.getComputedStyle) {
//它使用传统的"text-Align"风格的规则书写方式，而不是"textAlign"
name = name.replace(/([A-Z])/g,"-$1");
name = name.toLowerCase();
//获取style对象并取得属性的值(如果存在的话)
var s = document.defaultView.getComputedStyle(elem,"");
return s && s.getPropertyValue(name);
//否则，就是在使用其它的浏览器
} else return null;
}
</code></pre>]]></content:encoded>
</item>
<item>
<title>javascript在IE和Firefox中的不同语法</title>
<link>http://fireboy.sinaapp.com/javascript%e5%9c%a8ie%e5%92%8cfirefox%e4%b8%ad%e7%9a%84%e4%b8%8d%e5%90%8c%e8%af%ad%e6%b3%95/</link>
<pubDate>Mon, 06 Oct 2014 05:30:03 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=134</guid>
<description></description>
<content:encoded><![CDATA[<h3>一.元素查找问题</h3>
1. document.all[name]
(1)现有问题：Firefox不支持document.all[name]
(2)解决方法：使用getElementsByName(name)，getElementById(id)等来替代。
2. 集合类对象问题
(1)现有问题：IE中对许多集合类对象取用时可以用 ()，但在Firefox只能用[]。
如：IE中可以使用document.forms("formName")来返回名字为"formName"的Form，但在Firefox却行不通。
(2)解决方法：使用[]，上例中可以改为document.forms["formName"]
3. HTML元素的ID在JavaScript可见
(1)现有问题：IE中HTML元素中的ID可以作为document的下属对象变量名直接使用。在Firefox中不能。
(2)解决方法：使用getElementById("idName")代替idName作为对象变量使用。
4. eval(idName)取得对象
(1)现有问题：在IE中，利用eval(idName)可以取得ID为idName的HTML对象，在Firefox中不能。
(2)解决方法：用 getElementById(idName) 代替 eval(idName)。

5. 变量名与某HTML对象ID相同
(1)现有问题：在Firefox中，因为对象ID不作为HTML对象的名称，所以可以使用与HTML对象id相同的变量名，IE中不能。
(2)解决方法：在声明变量时，一律加上var，以避免歧义，这样在IE中亦可正常运行。此外，最好不要取与HTML对象id相同的变量名，以减少错误。
注：3、4和5都属于同一类的问题。
6. Frame
(1)现有问题：在IE中可以用window.top.frameId和window.top.frameName来得到该Frame所代表的Window，Firefox中只能用window.top.frameName。
(2)解决方法：将Frame的Id和Name设置成相同，使用window.top.frameName来访问Frame。
<h3>二、DOM操作</h3>
1. 设置元素的文本内容。
(1)现有问题：IE使用innerText，而Firefox使用textContent来设置元素文本内容。
(2)解决方法：如果文本内容不包含"&lt;"和"&gt;"等特殊字符，可以使用innerHTML。否则，可以使用：
var child = elem.firstChild;
if (child != null) elem.removeChild(child);
elem.appendChild(document.createTextNode(content));
2. parentElement，parent.children
(1)现有问题：IE可以使用parentElement获得父结点，parent.children得到结点的所有孩子结点。Firefox不支持。
(2)解决方法：使用parentNode和parent.childNodes。
3. 对childNodes的解释。
(1)现有问题：IE和Firefox中对childNodes的解释不同，IE不会包含空白文本结点，而Firefox会包含。
(2)解决方法：使用childNodes过滤文本结点，如下：
<pre class="language-javascript"><code>
var children = elem.childNodes;
    for (i = 0; i &lt; children.length; i++) {
      if (children[i].nodeType != 3) { 
         // 过滤文本结点
      }
}
</code></pre>
4. 对document.getElementsByName的解释。
(1)现有问题：IE中getElementsByName只会检查&lt;input&gt;和&lt;img&gt;元素，而在Firefox下会检查所有元素。
(2)解决方法：不要使用getElementsByName检查除&lt;input&gt;和&lt;img&gt;之外的元素，如果要获得单个元素，尽量使用getElementById。
5. 对document.getElementById的解释。
(1)现有问题：IE中getElementById不仅检查Id属性，也会检查Name属性，当Name属性匹配参数时也会返回该元素。而在Firefox中只会检查Id属性。
(2)解决方法：尽量保持Id和Name相同，不要让一个元素name属性和另一个元素的id属性相同。

<h3>三、事件</h3>
1. event.x与event.y问题
(1)现有问题：在IE中，event对象有x,y 属性，Firefox中没有。
(2)解决方法：在Firefox中，与event.x 等效的是 event.pageX。可以使用：
mX = event.x ? event.x : event.pageX;
2. window.event
(1)现有问题：使用window.event无法在Firefox上运行
(2)解决方法： evt = evt ? evt : (window.event ? window.event : null);
3. attachEvent和addEventListener
(1)现有问题：IE中使用attachEvent来添加事件，Firefox中使用addEventListener。
(2)解决方法：如下，注意事件参数的区别，一个是click，一个是onclick。
if (document.attachEvent) document.attachEvent("onclick", clickHandler);
else document.addEventListener("click",clickHandler,false);
四、语法
1. const
(1)现有问题：在IE中不能使用const关键字。如const constVar = 32;在IE中这是语法错误。
(2)解决方法：不使用const，以var代替。
2. 多余的逗号
(1)现有问题：firefox中对象文字常量容许多余的逗号，在IE中不允许。下面语句在IE中非法。
var obj = { 'key' : 'aaa', }
(2)解决方法：去掉多余逗号。

五、XML
1. 创建XMLHttpRequest
(1)现有问题：Firefox使用XMLHttpRequest，IE使用ActiveXObject。
(2)解决方法:
<pre class="language-javascript"><code class="language-javascript">
if (window.XMLHttpRequest) {
          req = new XMLHttpRequest();
} else if (window.ActiveXObject) {
req = new ActiveXObject("Microsoft.XMLHTTP");
}
</code></pre>

2. 创建DOM
(1)现有问题：Firefox和IE创建DOM的方式不同。
(2)解决方法：
<pre class="language-javascript"><code class="language-javascript">
function createXmlDom() {
var oXmlDom;
if (Window.ActiveXObject) { // IE
  oXmlDom = new ActiveXObject("Microsoft.XmlDom");
} else {  // Firefox
  oXmlDom = document.implementation.createDocument("", "", null);
}
}
</code></pre>
3. 加载XML
(1)现有问题：如果要加载外部文件IE和Firefox都可以用:
oXmlDom.async=false;      // 这在Firefox中是必须的
oXmlDom.load("test.xml");
但是它们加载xml字符串的方式不一样，IE中直接可以使用oXmlDom.loadXML("&lt;root&gt;&lt;child/&gt;&lt;/root&gt;")，而Firefox要使用DOMParser:
<pre class="language-javascript"><code class="language-javascript">
var oParser = new DOMParser();
var oXmlDom = oParser.parseFromString("&lt;root/&gt;", "text/xml");
</code></pre>
(2)解决方法：比较好的方法是给Firefox产生的XMLDom加上loadXML方法：
<pre class="language-javascript"><code class="language-javascript">
if (isFirefox) { // 需要浏览器检测
Document.prototype.loadXML = function(sXml) {
  var oParser = new DOMParser();
  var oXmlDom = oParser.parseFromString(sXml, "text/xml");
  while (this.firstChild) this.removeChild(this.firstChild); 
  for (var i = 0; i &lt; oXmlDom.childNodes.length; i++) {
  var oNewNode = this.importNode(oXmlDom.childNodes[i], true);
  this.appendChild(oNewNode);
  }
}
}
</code></pre>
这样在IE和Firefox就可以调用loadXML方法了。
4. XPath支持
(1)现有问题：IE中可以直接用XmlDOM的selectNodes来根据XPath表示式来选择结点，Firefox则比较复杂，需要使用XPathEvaluator。
<pre class="language-javascript"><code class="language-javascript">
//IE: 
var lstNodes = oXmlDom.documentElement.selectNodes("employee/name");
for (var i = 0; i &lt; lstNodes.length; i++) {
alert(lstNodes[i].firstChild.nodeValue);
}
//Firefox: 
var oEvaluator = new XPathEvaluator();
var oResult = oEvaluator.evaluate("employee/name", oXmlDom.documentElement, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
var oElement = oResult.iterateNext();
while (oElement) {
  alert(oElement.firstChild.nodeValue);
  oElement = oResult.iterateNext();
}
</code></pre>

(2)解决方法：比较好的方法给Firefox的Element添加selectNodes方法。
<pre class="language-javascript"><code class="language-javascript">
if (isFirefox) { // 需要浏览器检测
    Element.prototype.selectNodes = function(sXPath) {
    var oEvaluator = new XPathEvaluator();
      var oResult = oEvaluator.evaluate(sXPath, this, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null); 
      var aNodes = new Array();
      if (oResult != null) {
        var oElement = oResult.iterateNext();
        while (oElement) {
          aNodes.push(oElement);
          oElement = oResult.iterateNext();
        }
      }
      return aNodes;
}
</code></pre>
这样在IE和Firefox中就都可以调用selectNodes方法了。
5. XSLT支持
(1)现有问题：IE中可以使用XmlDOM的transferNode方法将其转换成html，而Firefox需要使用XSLTProcessor。
<pre class="language-javascript"><code class="language-javascript">
//IE:
oXmlDom.load("employee.xml");
oXslDom.load("employee.xslt");
var sResult=oXmlDom.transformNode(oXslDom);
//Firefox:
var oProcessor = new XSLTProcessor();
oProcessor.importStylesheet(oXslDom);
var oResultDom = oProcessor.transformToDocument(oXmlDom);        
var oSerializer = new XMLSerializer();
var sXml = oSerializer.serializeToString(oResultDom, "text/xml");
alert(sXml);
</code></pre>
(2)解决方法：比较好的方法给Firefox的Node添加transferNode方法。
<pre class="language-javascript"><code class="language-javascript">
if (isFirefox) { 
// 需要浏览器检测
Node.prototype.transformNode = function(oXslDom) {
var oProcessor = new XSLTProcessor();
  oProcessor.importStylesheet(oXslDom);
  var oResultDom = oProcessor.transformToDocument(oXmlDom);
  
  var oSerializer = new XMLSerializer();
  var sXml = oSerializer.serializeToString(oResultDom, "text/xml");
  
  return sXml;
}
}
</code></pre>
这样在IE和Firefox中就都可以调用transferNode方法了。
<h3>其他：</h3>
1.窗体的高度和宽度
IE：document.body.offsetWidth和document.body.offsetHeight。注意：此时页面一定要有body标签。
FF：window.innerWidth和window.innerHegiht，
以及document.documentElement.clientWidth和document.documentElement.clientHeight。
通用：document.body.clientWidth和document.body.clientHeight。

2.标签的自定义属性
IE：如果给标签div1定义了一个属性value，可以div1.value和div1["value"]取得该值。
FF：不能用div1.value和div1["value"]取。
通用：div1.getAttribute("value")。
3.用idName字符串取得对象的问题
(1)现有问题
在IE中，利用 eval(idName) 可以取得 id 为 idName 的 HTML 对象，在MF 中不能。
(2)解决方法
用 getElementById(idName) 代替 eval(idName)。

4.变量名与某 HTML 对象 id 相同的问题
(1)现有问题
在 MF 中，因为对象 id 不作为 HTML 对象的名称，所以可以使用与 HTML 对象 id 相同的变量名，IE 中不能。
(2)解决方法
在声明变量时，一律加上 var ，以避免歧义，这样在 IE 中亦可正常运行。
此外，最好不要取与 HTML 对象 id 相同的变量名，以减少错误。

5.document.getElementsByName() 和 document.all[name] 的问题
现有问题：在 IE 中，getElementsByName()、document.all[name] 均不能用来取得 div 元素
（是否还有其它不能取的元素还不知道）。
//document.all
Firefox可以兼容document.all， 但会生成一条警告。可以用getElementById("*")
或者 getElementByTagName("*")来代替
不过对于document.all.length等属性，则完全不兼容

6.input.type属性问题
说明:IE下input.type属性为只读;但是Firefox下input.type属性为读写

7.frame问题
以下面的frame为例：
<pre class="language-markup"><code class="language-markup">
&lt;frame src="xxx.html" mce_src="xxx.html" id="frameId" name="frameName" /&gt; 
</code></pre>
(1)访问frame对象:
IE:使用window.frameId或者window.frameName来访问这个frame对象. frameId和frameName可以同名。
FF:只能使用window.frameName来访问这个frame对象.
另外，在IE和Firefox中都可以使用window.document.getElementById("frameId")来访问这个frame对象.
(2)切换frame内容:
在IE和Firefox中都可以使用window.document.getElementById("testFrame").src = "xxx.html"
或window.frameName.location = "xxx.html"来切换frame的内容.
如果需要将frame中的参数传回父窗口(注意不是opener,而是parent frame)，可以在frme中使用parent来访问父窗口。
例如：window.parent.document.form1.filename.value="Aqing";


8.事件委托方法
IE：document.body.onload = inject; //Function inject()在这之前已被实现
FF：document.body.onload = inject();

9.innerText在IE中能正常工作，但是innerText在FireFox中却不行. 需用textContent

10.父节点、子节点和删除节点
IE：parentElement、parement.children，element.romoveNode(true)。
FF：parentNode、parentNode.childNodes，node.parentNode.removeChild(node)。

11.对select的options集合操作
枚举元素除了[]外，SelectName.options.item()也是可以的, 另外SelectName.options.length,
SelectName.options.add/remove都可以在两种浏览器上使用。
注意在add后赋值元素，否则会失败
动态删除select中的所有options：
document.getElementById("ddlResourceType").options.length=0;
动态删除select中的某一项option：
document.getElementById("ddlResourceType").options.remove(indx);
动态添加select中的项option:
document.getElementById("ddlResourceType").options.add(new Option(text,value));
IE FF 动态删除通用方法：
document.getElementById("ddlResourceType").options[indx] = null;

12.捕获事件
问题：
FF没有setCapture()、releaseCapture()方法
解决方法：
IE:
obj.setCapture();
obj.releaseCapture();
FF:
window.captureEvents(Event.MOUSEMOVE|Event.MOUSEUP);
window.releaseEvents(Event.MOUSEMOVE|Event.MOUSEUP);
<pre class="language-javascript"><code class="language-javascript">
if (!window.captureEvents) {    
o.setCapture();    
}else {    
window.captureEvents(Event.MOUSEMOVE|Event.MOUSEUP);    
}    
if (!window.captureEvents) {    
o.releaseCapture();    
}else {    
window.releaseEvents(Event.MOUSEMOVE|Event.MOUSEUP);    
}    
</code></pre>
13.禁止选取网页内容
问题：
FF需要用CSS禁止，IE用JS禁止
解决方法：
IE: obj.onselectstart = function() {return false;}
FF: -moz-user-select:none;
1４. CSS "float" 值
<pre class="language-javascript">
<code>document.getElementById("header").style.styleFloat = "left"; //IE
document.getElementById("header").style.cssFloat = "left"; //Firefox</code>
</pre>
１５. 元素的推算样式
<pre class="language-javascript">
<code>var myObject = document.getElementById("header");   
var myStyle = myObject.currentStyle.backgroundColor; //IE
var myObject = document.getElementById("header");   
var myComputedStyle = document.defaultView.getComputedStyle(myObject, null); 
var myStyle = myComputedStyle.backgroundColor;  //Firefox 
</code>
</pre>
１６. 访问元素的"class"
<pre class="language-javascript">
<code>
var myObject = document.getElementById("header");   
var myAttribute = myObject.getAttribute("className"); //IE
var myObject = document.getElementById("header");   
var myAttribute = myObject.getAttribute("class"); //Firefox</code>
</pre>
１７. 访问<label>标签中的"for"
<pre class="language-javascript">
<code>
var myObject = document.getElementById("myLabel");   
var myAttribute = myObject.getAttribute("htmlFor"); //IE
var = document.getElementById("myLabel");   
var myAttribute = myObject.getAttribute("for"); //Firefox</code>
</pre>
１８. 获取鼠标指针的位置
<pre class="language-javascript">
<code>
var myCursorPosition = [0, 0];   
myCursorPosition[0] = event.clientX;   
myCursorPosition[1] = event.clientY; //IE
var myCursorPosition = [0, 0];   
myCursorPosition[0] = event.pageX;   
myCursorPosition[1] = event.pageY; //Firefox</code>
</pre>
１９. 获取可见区域、窗口的大小
<pre class="language-javascript">
<code>
var myBrowserSize = [0, 0];   
myBrowserSize[0] = document.documentElement.clientWidth;   
myBrowserSize[1] = document.documentElement.clientHeight; //IE
var myBrowserSize = [0, 0];   
myBrowserSize[0] = window.innerWidth;   
myBrowserSize[1] = window.innerHeight;//Firefox</code>
</pre>]]></content:encoded>
</item>
<item>
<title>JavaScript定义类的几种方式</title>
<link>http://fireboy.sinaapp.com/js_class_dedined/</link>
<pubDate>Mon, 06 Oct 2014 06:12:35 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=137</guid>
<description></description>
<content:encoded><![CDATA[<h2>1．工厂方式</h2>
javaScript中创建自己的类和对象，我们应该是必须掌握的，我们都知道javaScript中对象的属性可以在对象创建后动态定义，比如下面的代码：
<pre class="language-javascript"><code class="language-javascript">
&lt;script type="text/javascript">
    var oCar = new Object();
    oCar.color = "red";
    oCar.doors = 4;
    oCar.showColor = function() {
        alert(this.color);
    }
    //调用
    oCar.showColor();
&lt;/script>
</code></pre>
我们很容易使用oCar对象，但是我们创就是想创建多个Car实例。我们可以使用一个函数来封装上面的代码来实现：
<pre class="language-javascript"><code class="language-javascript">
&lt;script type="text/javascript">
    function createCar() {
        var oCar = new Object();
        oCar.color = "red";
        oCar.doors = 4;
        oCar.showColor = function() {
            alert(this.color);
        }
        return oCar;
    }
    //调用
    var ocar1 = createCar();
    var ocar2 = createCar();
    ocar1.color = "black";
    ocar1.showColor();
    ocar2.showColor();
&lt;/script>
</code></pre>
顺便说一下，javaScript对象默认成员属性都是public 的。这种方式我们称为工厂方式，我们创造了能创建并返回特定类型的对象的工厂。这样做有点意思了，但是在面向对象中我们经常使用创建对象的方法是：Car car=new Car();使用new 关键字已经深入人心，因此我们使用上面的方法去定义总感觉别扭，并且每次调用时都去创建新的属性以及函数，功能上也不实际。下来我们看看构造函数的形式定义类。
<h2>2．构造函数</h2>
这种方式看起来有点象工厂函数。具体表现如下：
<pre class="language-javascript"><code class="language-javascript">
&lt;script type="text/javascript">
    //定义
    function Car(color, doors) {
        this.color = color;
        this.doors = doors;
        this.showColor = function() {
            alert(this.color);
        };
    }
    //调用
    var car1 = new Car("red", 4);
    var car2 = new Car("blue", 4);
    car1.showColor();
    car2.showColor();
&lt;/script> 
</code></pre>
看起来效果很明显，有差别了吧。感觉有点意思了。在构造函数内部创造对象使用this 关键字，使用new 运算符创建对象感觉非常亲切。但是也有点问题：每次new 对象时都会创建所有的属性，包括函数的创建，也就是说多个对象完全独立，我们定义类的目的就是为了共享方法以及数据，但是car1对象与car2对象都是各自独立的属性与函数，最起码我们应该共享方法。这就是原形方式的优势所在。
<h2>3．原型方式</h2>
利用对象的prototype属性，可把它看出创建新对象所依赖的原型。方法如下：
<pre class="language-javascript"><code class="language-javascript">
&lt;script type="text/javascript">
    //定义
    function Car() {
    };
    Car.prototype.color = "red";
    Car.prototype.doors = 4;
    Car.prototype.drivers = new Array("Tom", "Jerry");
    Car.prototype.showColor = function() {
        alert(this.color);
    }
    //调用：
    var car1 = new Car();
    var car2 = new Car();
    car1.showColor();
    car2.showColor();
    alert(car1.drivers);
    car1.drivers.push("stephen");
    alert(car1.drivers); //结果：Tom,Jerry,stephen
    alert(car2.drivers); //结果：Tom,Jerry,stephen
//可以用json方式简化prototype的定义:
    Car.prototype =
    {
        color: "red",
        doors: 4,
        drivers: ["Tom", "Jerry",'safdad'],
        showColor: function() {
            alert(this.color);
        }
    }
 &lt;/script>
</code></pre>
首先这段代码的构造函数，其中没有任何代码，接下来通过对象的prototype属性添加属性定义Car对象的属性。这种方法很好，但是问题是Car的对象指向的是Array指针，Car的两个对象都指向同一个Array数组，其中一个对象car1改变属性对象的引用（数组Array）时，另一个对象car2也同时改变，这是不允许的。同时该问题也表现在原型不能带任何初始化参数，导致构造函数无法正常初始化。这需要另一种方式来解决：那就是混合的构造函数/原型模式。
<h2>4. 混合的构造函数/原型模式</h2>
联合使用构造函数和原型方式，定义类就非常方便。
<pre class="language-javascript"><code class="language-javascript">
&lt;script type="text/javascript">
//定义
function Car(color,doors){
    this.color=color;
    this.doors=doors;
    this.drivers=new Array("Tom","Jerry");
}
Car.prototype.showColor=function(){
     alert(this.color);
}
//调用：
var car1=new Car('red',4);
var car2=new Car('blue',4);
car1.showColor();
car2.showColor();
alert(car1.drivers);
car1.drivers.push("stephen");
alert(car1.drivers); //结果：Tom,Jerry,stephen
alert(car2.drivers); //结果：Tom,Jerry
alert(car1 instanceof Car);
&lt;/script> 
</code></pre>
该方法是把属性放在内部定义，把方法放在外边利用prototype进行定义。解决了第三种方法的问题。
这种方法其实应该来说非常友好了，但是比起java的语法来，应该有一些不和谐，感觉比较凌乱，对C++来说，我们就没有那么麻烦的感觉了，可是开发C++的研发人员一般情况下很少涉及javaScript，而对J2EE的研发人员来说，这种方式总有一些别扭。总感觉不是友好的封装，其实只不过是视觉上封装效果不是很好而已，要想达到视觉封装效果而又能达到这种方法的效果的也可以以，个人认为其实比较麻烦。那就是动态原型法。
<h2>5.动态原型</h2>
对于习惯使用其他语言的开发者来说，使用混合的构造函数/原型方式感觉不那么和谐。毕竟，定义类时，大多数面向对象语言都对属性和方法进行了视觉上的封装。考虑下面的C#类：
<pre class="language-c#"><code class="language-c#">
class Car //class
{
    public string color = "red";
    public int doors = 4;
    public int mpg = 23;
    public Car(string color, int doors, int mpg) //constructor
    {
        this.color = color;
        this.doors = doors;
        this.mpg = mpg;
    }
    public void showColor() //method
    {
        Console.WriteLine(this.color);
    }
}
</code></pre>
C#很好的打包了Car类的所有属性和方法，因此看见这段代码就知道它要实现什么功能，它定义了一个对象的信息。批评混合的构造函数/原型方式的人认为，在构造函数内存找属性，在其外部找方法的做法不合逻辑。因此，他们设计了动态原型方法，以提供更友好的编码风格。
动态原型方法的基本想法与混合的构造函数/原型方式相同，即在构造函数内定义非函数属性，而函数属性则利用原型属性定义。唯一的区别是赋予对象方法的位置。下面是用动态原型方法重写的Car类：
<pre class="language-javascript"><code class="language-javascript">
&lt;script type="text/javascript">
function Car() {
    this.color = "red";
    this.doors = 4;
    this.drivers = new Array("Tom", "Jerry");
    if (typeof Car._initialized == "undefined") {
        Car.prototype.showColor = function() {
            alert(this.color);
        }
    }
    Car._initialized = true;
}
&lt;/script>
</code></pre>
直到检查typeof Car._initialized是否等于"undefined"之前，这个构造函数都未发生变化。这行代码是动态原型方法中最重要的部分。如果这个值未定义，构造函数将用原型方式继续定义对象的方法，然后把Car._initialized设置为true。如果这个值定义了（它的值为true时，typeof的值为Boolean），那么就不再创建该方法。简而言之，该方法使用标志（_initialized）来判断是否已给原型赋予了任何方法。该方法只创建并赋值一次，为取悦传统的OOP开发者，这段代码看起来更像其他语言中的类定义了。
<h2>6  混合工厂方式</h2>
这种方式通常是在不能应用前一种方式时的变通方法。它的目的是创建假构造函数，只返回另一种对象的新实例。这段代码看来与工厂函数非常相似：
<pre class="language-javascript"><code class="language-javascript">
function Car() {
   var oTempCar = new Object();
   oTempCar.color="red";
   oTempCar.doors=4;
   oTempCar.mpg=23;
   oTempCar.showColor = function() {
       alert(this.color);
   }
   return oTempCar;
}
</code></pre>
与经典方式不同，这种方式使用new运算符，使它看起来像真正的构造函数：
var oCar = new Car();
由于在Car()构造函数内部调用了new运算符，所以将忽略第二个new运算符（位于构造函数之外）。在构造函数内部创建的对象被传递回变量var。这种方式在对象方法的内部管理方面与经典方式有着相同的问题。强烈建议：除非万不得已（请参阅第15章），还是避免使用这种方式。
总结：（采用哪种方式)
目前使用最广泛的是混合的构造函数/原型方式。此外，动态原型方法也很流行，在功能上与构造函数/原型方式等价。可以采用这两种方式中的任何一种。不过不要单独使用经典的构造函数或原型方式，因为这样会给代码引入问题。
<pre class="language-javascript"><code class="language-javascript">
//static class (1:function)
    var CarCollection = new function() {
        var _carCollection = new Array(); //global,private
        this.Add = function(objCar) {
            alert('Add');
        }
        this.Get = function(carid) {
            alert('Get');
        }
    }
//static class (2:json)
    var Car = {
        color: 'red',
        doors: 4,
        showColor: function() { alert(this.color); }
    }
    Car.showColor();
</code></pre>]]></content:encoded>
</item>
<item>
<title>JavaScript操作Excel</title>
<link>http://fireboy.sinaapp.com/javascript_excel/</link>
<pubDate>Mon, 06 Oct 2014 10:21:39 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=140</guid>
<description></description>
<content:encoded><![CDATA[<pre><code class="language-markup">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Document&lt;/title&gt;
</code>
<code class="language-javascript">
&lt;script type="text/javascript"&gt;
function MakeExcel(){
var i,j;
    try {
      var xls    = new ActiveXObject ( "Excel.Application" );
     }
    catch(e) {
         alert( "要打印该表，您必须安装Excel电子表格软件，同时浏览器须使用“ActiveX 控件”，您的浏览器须允许执行控件。 请点击【帮助】了解浏览器设置方法！");
              return "";
     }
            xls.visible =true;  //设置excel为可见
    var xlBook = xls.Workbooks.Add;
    var xlsheet = xlBook.Worksheets(1);
    //合并
      xlsheet.Range(xlsheet.Cells(1,1),xlsheet.Cells(1,7)).mergecells=true;
      xlsheet.Range(xlsheet.Cells(1,1),xlsheet.Cells(1,7)).value="发卡记录";
     //  xlsheet.Range(xlsheet.Cells(1,1),xlsheet.Cells(1,6)).Interior.ColorIndex=5;//设置底色为蓝色 
 //   xlsheet.Range(xlsheet.Cells(1,1),xlsheet.Cells(1,6)).Font.ColorIndex=4;//设置字体色         
 // xlsheet.Rows(1). Interior .ColorIndex = 5 ;//设置底色为蓝色  设置背景色 Rows(1).Font.ColorIndex=4  
    //设置行高
    xlsheet.Rows(1).RowHeight = 25;
    //设置字体 ws.Range(ws.Cells(i0+1,j0), ws.Cells(i0+1,j1)).Font.Size = 13 --&gt;
    xlsheet.Rows(1).Font.Size=14;
    //设置字体 设置选定区的字体  xlsheet.Range(xlsheet.Cells(i0,j0), ws.Cells(i0,j0)).Font.Name = "黑体" --&gt;
    xlsheet.Rows(1).Font.Name="黑体";
    //设置列宽 xlsheet.Columns(2)=14;--&gt;
    xlsheet.Columns("A:D").ColumnWidth =18;
     &lt;!--设置显示字符而不是数字--&gt;
    xlsheet.Columns(2).NumberFormatLocal="@";
    xlsheet.Columns(7).NumberFormatLocal="@";
     //设置单元格内容自动换行 range.WrapText  =  true  ;
 //设置单元格内容水平对齐方式 range.HorizontalAlignment  =  Excel.XlHAlign.xlHAlignCenter;//设置单元格内容竖直堆砌方式
 //range.VerticalAlignment=Excel.XlVAlign.xlVAlignCenter
 //range.WrapText  =  true;  xlsheet.Rows(3).WrapText=true  自动换行
    //设置标题栏
     xlsheet.Cells(2,1).Value="卡号";
     xlsheet.Cells(2,2).Value="密码";
     xlsheet.Cells(2,3).Value="计费方式";
     xlsheet.Cells(2,4).Value="有效天数";
     xlsheet.Cells(2,5).Value="金额";
     xlsheet.Cells(2,6).Value="所属服务项目";
       xlsheet.Cells(2,7).Value="发卡时间";
     var oTable=document.all['fors:data'];
     var rowNum=oTable.rows.length;
     for(i=2;i&lt;=rowNum;i++){
     for (j=1;j&lt;=7;j++){
//html table类容写到excel
       xlsheet.Cells(i+1,j).Value=oTable.rows(i-1).cells(j-1).innerHTML;
            }
    }
    &lt;!--   xlsheet.Range(xls.Cells(i+4,2),xls.Cells(rowNum,4)).Merge; --&gt;
    // xlsheet.Range(xlsheet.Cells(i, 4), xlsheet.Cells(i-1, 6)).BorderAround , 4
 // for(mn=1,mn&lt;=6;mn++) .     xlsheet.Range(xlsheet.Cells(1, mn), xlsheet.Cells(i1, j)).Columns.AutoFit;
      xlsheet.Columns.AutoFit;
                 xlsheet.Range( xlsheet.Cells(1,1),xlsheet.Cells(rowNum+1,7)).HorizontalAlignment =-4108;//居中
                   xlsheet.Range( xlsheet.Cells(1,1),xlsheet.Cells(1,7)).VerticalAlignment =-4108;
                 xlsheet.Range( xlsheet.Cells(2,1),xlsheet.Cells(rowNum+1,7)).Font.Size=10;
      xlsheet.Range( xlsheet.Cells(2,1),xlsheet.Cells(rowNum+1,7)).Borders(3).Weight = 2; //设置左边距
       xlsheet.Range( xlsheet.Cells(2,1),xlsheet.Cells(rowNum+1,7)).Borders(4).Weight = 2;//设置右边距
             xlsheet.Range( xlsheet.Cells(2,1),xlsheet.Cells(rowNum+1,7)).Borders(1).Weight = 2;//设置顶边距
       xlsheet.Range( xlsheet.Cells(2,1),xlsheet.Cells(rowNum+1,7)).Borders(2).Weight = 2;//设置底边距    
        xls.UserControl = true;  //很重要,不能省略,不然会出问题 意思是excel交由用户控制
       xls=null;
       xlBook=null;
       xlsheet=null;
}
&lt;/script&gt; 
</code>
<code class="language-markup">
&lt;title&gt;ziyuanweihu&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;        
&lt;input type="button"  value="生成excel文件" onclick="MakeExcel()" /&gt;
&lt;table id="fors:data" border="1" cellpadding="0" cellspacing="0" width="100%"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col"&gt;&lt;span id="fors:data:headerText1"&gt;卡号&lt;/span&gt;&lt;/th&gt;
&lt;th scope="col"&gt;&lt;span id="fors:data:headerText2"&gt;密码&lt;/span&gt;&lt;/th&gt;
&lt;th scope="col"&gt;&lt;span id="fors:data:headerText3"&gt;计费方式&lt;/span&gt;&lt;/th&gt;
&lt;th scope="col"&gt;&lt;span id="fors:data:headerText4"&gt;有效天数&lt;/span&gt;&lt;/th&gt;
&lt;th scope="col"&gt;金额&lt;/th&gt;
&lt;th scope="col"&gt;&lt;span id="fors:data:headerText6"&gt;所属服务项目&lt;/span&gt;&lt;/th&gt;
&lt;th scope="col"&gt;&lt;span id="fors:data:headerText7"&gt;发卡时间&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;td&gt;h000010010&lt;/td&gt;
&lt;td&gt;543860&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010011&lt;/td&gt;
&lt;td&gt;683352&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010012&lt;/td&gt;
&lt;td&gt;433215&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010013&lt;/td&gt;
&lt;td&gt;393899&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010014&lt;/td&gt;
&lt;td&gt;031736&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010015&lt;/td&gt;
&lt;td&gt;188600&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010016&lt;/td&gt;
&lt;td&gt;363407&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010017&lt;/td&gt;
&lt;td&gt;175315&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010018&lt;/td&gt;
&lt;td&gt;354437&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h000010019&lt;/td&gt;
&lt;td&gt;234750&lt;/td&gt;
&lt;td&gt;计点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;测试项目&lt;/td&gt;
&lt;td&gt;2006-06-23 10:14:40.843&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>]]></content:encoded>
</item>
<item>
<title>eval(function(p,a,c,k,e,d)系列加解密javascript程序</title>
<link>http://fireboy.sinaapp.com/evalfunction/</link>
<pubDate>Mon, 06 Oct 2014 13:02:47 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=146</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-markup">
<code class="language-markup">
&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
&lt;meta charset="UTF-8">
&lt;title>Document&lt;/title>
&lt;/head>
&lt;body>
&lt;script></code><code class="language-javascript">
a=62; 
function encode() { 
var code = document.getElementById('code').value; 
code = code.replace(/[\r\n]+/g, ''); 
code = code.replace(/'/g, "\\'"); 
var tmp = code.match(/\b(\w+)\b/g); 
tmp.sort(); 
var dict = []; 
var i, t = ''; 
for(var i=0; i&lt;tmp.length; i++) { 
  if(tmp[i] != t) dict.push(t = tmp[i]); 
} 
var len = dict.length; 
var ch; 
for(i=0; i&lt;len; i++) { 
  ch = num(i); 
  code = code.replace(new RegExp('\\b'+dict[i]+'\\b','g'), ch); 
  if(ch == dict[i]) dict[i] = ''; 
} 
 document.getElementById('code').value = "eval(function(p,a,c,k,e,d){e=function(c){return(c&lt;a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)d[e(c)]=k[c]||e(c);k=[function(e){return d[e]}];e=function(){return'\\\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p}(" 
   + "'"+code+"',"+a+","+len+",'"+ dict.join('|')+"'.split('|'),0,{}))"; 
} 
function num(c) { 
return(c&lt;a?'':num(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36)); 
} 
function run() { 
eval(document.getElementById('code').value); 
} 
function decode() { 
var code = document.getElementById('code').value; 
code = code.replace(/^eval/, ''); 
document.getElementById('code').value = eval(code); 
} </code><code class="language-markup">
&lt;/script> 
&lt;textarea id="code" cols="80" rows="20"> &lt;/textarea>
&lt;input type=button onclick=encode() value=编码> 
&lt;input type=button onclick=run() value=执行> 
&lt;input type=button onclick=decode() value=解码>
&lt;/body>
&lt;/html>
</code></pre>]]></content:encoded>
</item>
<item>
<title>将人民币数字转换成大写形式</title>
<link>http://fireboy.sinaapp.com/convertcurrency/</link>
<pubDate>Mon, 06 Oct 2014 17:30:31 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=152</guid>
<description></description>
<content:encoded><![CDATA[<pre>
<code class="language-markup">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
 &lt;title&gt;将人民币数字转换成大写形式&lt;/title&gt;  
 &lt;script&gt; 
 </code><code class="language-javascript"> 
function convertCurrency(currencyDigits) {  
// Constants:  
 var MAXIMUM_NUMBER = 99999999999.99;   
 var CN_ZERO = "零";  
 var CN_ONE = "壹";  
 var CN_TWO = "贰";  
 var CN_THREE = "叁";  
 var CN_FOUR = "肆";  
 var CN_FIVE = "伍";  
 var CN_SIX = "陆";  
 var CN_SEVEN = "柒";  
 var CN_EIGHT = "捌";  
 var CN_NINE = "玖";  
 var CN_TEN = "拾";  
 var CN_HUNDRED = "佰";  
 var CN_THOUSAND = "仟";  
 var CN_TEN_THOUSAND = "万";  
 var CN_HUNDRED_MILLION = "亿";  
 var CN_SYMBOL = "￥";  
 var CN_DOLLAR = "圆";  
 var CN_TEN_CENT = "角";  
 var CN_CENT = "分";  
 var CN_INTEGER = "整";  
   
// Variables:  
 var integral; // Represent integral part of digit number.  
 var decimal; // Represent decimal part of digit number.  
 var outputCharacters; // The output result.  
 var parts;  
 var digits, radices, bigRadices, decimals;  
 var zeroCount;  
 var i, p, d;  
 var quotient, modulus;  
   
// Validate input string:  
 currencyDigits = currencyDigits.toString();  
 if (currencyDigits == "") {  
 alert("Empty input!");  
return "";  
 }  
 if (currencyDigits.match(/[^,.\d]/) != null) {  
 alert("Invalid characters in the input string!");  
 return "";  
 }  
 if ((currencyDigits).match(/^((\d{1,3}(,\d{3})*(.((\d{3},)*\d{1,3}))?)|(\d+(.\d+)?))$/) == null) {  
alert("Illegal format of digit number!");  
 return "";  
 }  
   
// Normalize the format of input digits:  
 currencyDigits = currencyDigits.replace(/,/g, ""); // Remove comma delimiters.  
 currencyDigits = currencyDigits.replace(/^0+/, ""); // Trim zeros at the beginning.  
 // Assert the number is not greater than the maximum number.  
 if (Number(currencyDigits) &gt; MAXIMUM_NUMBER) {  
 alert("Too large a number to convert!");  
 return "";  
 }  
   
// Process the coversion from currency digits to characters:  
 // Separate integral and decimal parts before processing coversion:  
 parts = currencyDigits.split(".");  
 if (parts.length &gt; 1){  
 integral = parts[0];  
 decimal = parts[1];  
 // Cut down redundant decimal digits that are after the second.  
decimal = decimal.substr(0, 2);  
 }else {  
 integral = parts[0];  
 decimal = "";  
 }  
 // Prepare the characters corresponding to the digits:  
 digits = new Array(CN_ZERO, CN_ONE, CN_TWO, CN_THREE, CN_FOUR, CN_FIVE, CN_SIX, CN_SEVEN, CN_EIGHT, CN_NINE);  
 radices = new Array("", CN_TEN, CN_HUNDRED, CN_THOUSAND);  
 bigRadices = new Array("", CN_TEN_THOUSAND, CN_HUNDRED_MILLION);  
 decimals = new Array(CN_TEN_CENT, CN_CENT);  
 // Start processing:  
 outputCharacters = "";  
 // Process integral part if it is larger than 0:  
 if (Number(integral) &gt; 0) {  
 zeroCount = 0;  
 for (i = 0; i &lt; integral.length; i++) {  
 p = integral.length - i - 1;  
 d = integral.substr(i, 1);  
 quotient = p / 4;  
 modulus = p % 4;  
if (d == "0") {  
zeroCount++;  
}else {  
if (zeroCount &gt; 0){  
outputCharacters += digits[0];  
}  
zeroCount = 0;  
outputCharacters += digits[Number(d)] + radices[modulus];  
}  
if (modulus == 0 && zeroCount&lt;4) {  
outputCharacters += bigRadices[quotient];  
}  
}  
 outputCharacters += CN_DOLLAR;  
 }  
// Process decimal part if there is:  
if (decimal != "") {  
for (i = 0; i &lt; decimal.length; i++) {  
d = decimal.substr(i, 1);  
if (d != "0") {  
outputCharacters += digits[Number(d)] + decimals[i];  
}  
}  
}  
// Confirm and return the final output string:  
if (outputCharacters == "") {  
outputCharacters = CN_ZERO + CN_DOLLAR;  
}  
if (decimal == ""){  
outputCharacters += CN_INTEGER;  
}  
outputCharacters = CN_SYMBOL + outputCharacters;  
return outputCharacters;  
} 
</code><code class="language-markup">
 &lt;/script&gt;  
 &lt;/head&gt;  
 &lt;body&gt;  
 &lt;input id="Digits" type="text" name="Digits" size="20" /&gt;  
 &lt;input id="Convert" type="button" value="Convert" name="Convert" onclick="Result.value = convertCurrency(Digits.value);" /&gt;  
 &lt;input id="Result" type="text" name="Result" size="60" /&gt;  
&lt;/body&gt;  
&lt;/html&gt;
</pre>
]]></content:encoded>
</item>
<item>
<title>app base类库</title>
<link>http://fireboy.sinaapp.com/app-base/</link>
<pubDate>Mon, 06 Oct 2014 17:58:49 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=155</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-javascript">
<code> 
 /*----------------------------------- 
Web Application JavaScript Library 
------------------------------------*/
//String原生对象扩展 置空左右端空格 
String.prototype.trim = function(){ 
return this.replace(/(^[\s\n\t\r]*)|([\s\n\r\t]*$)/g, ""); 
}; 
//Date原生对象扩展 格式化输出 
Date.prototype.format = function (string) { 
var self = this; 
var p = function p(s) { 
return (s.toString().length == 1) ? "0" + s : s; 
}; 
return string ? string.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(string) { 
switch (string) { 
case "hh": return p(self.getHours() &lt; 13 ? self.getHours() : (self.getHours() - 12)); 
case "h": return self.getHours() &lt; 13 ? self.getHours() : (self.getHours() - 12); 
case "HH": return p(self.getHours()); 
case "H": return self.getHours(); 
case "mm": return p(self.getMinutes()); 
case "m": return self.getMinutes(); 
case "ss": return p(self.getSeconds()); 
case "s": return self.getSeconds(); 
case "yyyy": return self.getFullYear(); 
case "yy": return self.getFullYear().toString().substring(2, 4); 
case "dddd": return self.getDayName(); 
case "ddd": return self.getDayName(true); 
case "dd": return p(self.getDate()); 
case "d": return self.getDate().toString(); 
case "MMMM": return self.getMonthName(); 
case "MMM": return self.getMonthName(true); 
case "MM": return p((self.getMonth() + 1)); 
case "M": return self.getMonth() + 1; 
case "t": return self.getHours() &lt; 12 ? Date.CultureInfo.amDesignator.substring(0, 1) : Date.CultureInfo.pmDesignator.substring(0, 1); 
case "tt": return self.getHours() &lt; 12 ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator; 
case "zzz": 
case "zz": 
case "z": return ""; } 
    }) : this.toString(); 
}; 
/*------------------------------------*/
//声明对象 
var App = {}; 
//对象继承或属性合并 
App.extend = function(obj, hash) { 
this.each(hash, function(key, value) { 
obj[key] = value; 
}); 
return obj; 
}; 
//遍历 
App.each = function(obj, func, context) { 
var length = obj.length, i = -1; 
if(length !== undefined) { 
while(++i &lt; length) if(func.call(context, obj[i], i, obj, length) === false) break; 
}else for(var key in obj) 
if(obj.hasOwnProperty(key)) 
if(func.call(context, key, obj[key], obj) === false) break; 
return obj; 
}; 
(function(doc, win){ 
var string = Object.prototype.toString, 
quirks = doc.compatMode === "BackCompat", 
docelem = doc.documentElement, 
ua = win.navigator.userAgent.toLowerCase(), 
version = (ua.match( /.(?:rv|it|ra|ie)[\/: ]([\d.]+)/ ) || [])[1], 
isChrome = /chrome/.test(ua), 
isWebKit = /webkit/.test(ua), 
isSafari = !isChrome && isWebKit, 
isOpera = /opera/.test(ua), 
isIE = /msie/.test( ua ) && !isOpera, 
isFF = /firefox/.test(ua); 
//Dom加载 
doc.ready = function(func) { 
var isReady = false,doReady = function() { 
if (isReady) return; 
isReady = true; func(); 
}; 
if (isIE) { 
if (docelem.doScroll && win.self == win.top) { 
(function() { 
if (isReady) return; 
try { 
docelem.doScroll("left"); 
} catch (error) { 
setTimeout(arguments.callee, 0); 
return; 
} 
doReady(); 
})(); 
}else { 
if (isReady) return; 
this.attachEvent("onreadystatechange", function() { 
if (doc.readyState === "complete") { 
doc.detachEvent("onreadystatechange", arguments.callee); 
doReady(); 
} 
}); 
} 
win.attachEvent('onload', doReady); 
}else if(isWebKit && version &lt; 525) { 
(function() { 
if (isReady) return; 
if (/loaded|complete/.test(doc.readyState)) 
doReady(); 
else 
setTimeout(arguments.callee, 0); 
})(); 
win.addEventListener('load', doReady, false); 
}else { 
if (!isFF) 
this.addEventListener("DOMContentLoaded", function() { 
doc.removeEventListener("DOMContentLoaded", arguments.callee, false); 
doReady(); 
}, false); 
this.addEventListener('load', doReady, false); 
} 
}; 
App.extend(App,{ 
//类型检测 
isArray: function(v) { //是否为数组 
return string.apply(v) === "[object Array]"; 
}, 
isFunction: function(v) { //是否为函数体 
return string.apply(v) === "[object Function]"; 
}, 
isNumber: function(v) { //是否为数字 
return typeof v === "number" && isFinite(v); 
}, 
isDate: function(v) { //是否为日期 
return string.apply(v) === "[object Date]"; 
}, 
isElement: function(v) { //是否为Dom元素节点 
return !!(v && v.nodeType === 1); 
}, 
// 浏览器检测 
isOpera: isOpera, 
isChrome: isChrome, 
isWebKit: isWebKit, 
isSafari: isSafari, 
isIE: isIE, 
isFF: isFF, 
isQuirks:quirks, 
getVersion:version,
//取id元素 
$: function(id) { 
return typeof id === "string" ? doc.getElementById(id) : id; 
}, 
//取name元素集合 
$N:function(name){ 
return doc.getElementsByName(name); 
}, 
//取tag元素集合 
$T:function(tag, root){ 
return (root || doc).getElementsByTagName(tag); 
}, 
//按属性名(是否包含)、值、范围取元素集合 
$A:function(attrName, attrValue, tag, root){ 
var elems = doc.all ? doc.all : this.$T( tag || "*",root || doc), result = [], 
attVal=(typeof attrValue!="undefined")?new RegExp("(^|\\s)"+attrValue+"(\\s|$)"):null; 
for(var i=0; i&lt;elems.length; i++){ 
attr = elems[i][attrName] || elems[i].getAttribute(attrName); 
if(typeof attr === "string" && attr.length > 0){ 
if(typeof attrValue === "undefined" || (attVal && attVal.test(attr))){ 
result.push(elems[i]); 
} 
} 
} 
return result; 
}, 
//取body元素 
$B: doc.body || docelem, 
//取Class属性元素集合 
$C:function(attrValue, tag, root){ 
return this.$A("className",attrValue, tag, root); 
}, 
//取浏览器窗体宽度 
getWinWidth: win.innerWidth || docelem.clientWidth || doc.body.clientWidth, 
//取浏览器窗体高度 
getWinHeight: win.innerHeight || docelem.clientHeight || doc.body.clientHeight, 
//取元素样式 
getStyle: function(elem,name){ 
if(elem.style[name]){ 
return elem.style[name]; 
}else if(elem.currentStyle){ 
return elem.currentStyle[name]; 
}else if(doc.defaultView && doc.defaultView.getComputedStyle){ 
name = name.replace(/([A-Z])/g,"-$1"); 
name = name.toLowerCase(); 
var s = doc.defaultView.getComputedStyle(elem,""); 
return s && s.getPropertyValue(name); 
}else{ 
return null; 
} 
}, 
//获取元素屏幕坐标值 
getPosition: function() { 
return docelem.getBoundingClientRect && function(o){ 
var pos = o.getBoundingClientRect(), root = o.ownerDocument || o.doc; 
return {left:pos.left+root.documentElement.scrollLeft,top:pos.top+root.documentElement.scrollTop}; 
}||function(o){ 
var x = 0, y = 0; 
do{x += o.offsetLeft;y += o.offsetTop;}while((o=o.offsetParent)); 
return {left:x,top:y}; 
};
}(), 
//设置透明度 
setOpacity: function (elem,num){ 
if(elem.filters){ 
elem.style.filter = "alpha(opacity="+num+")"; 
}else{ 
elem.style.opacity = num/100; 
} 
}, 
//隐藏或显示元素 
hide: function(elem){elem.style.display = "none";}, 
show: function(elem){elem.style.display = "block";}, 
toggle: function(elem){ 
elem.style.display = this.getStyle(elem,"display") === "none" ?"block":"none"; 
}, 
//元素Class属性操作 
addClass: function(elem, clsName) { 
if (elem.className === '') { 
elem.className = clsName; 
}else if(elem.className!==''&&(' '+elem.className+' ').indexOf(' '+clsName+' ')=== -1){ 
elem.className = elem.className + ' ' + clsName; 
} 
}, 
removeClass: function(elem, clsName) { 
if (clsName && (' '+elem.className+' ').indexOf(' '+clsName+' ')>-1){ 
elem.className=(' '+elem.className+' ').replace(' '+clsName+' ',' ').replace(/^ | $/g,''); 
} 
}, 
//追加Html文本对象( 支持Table ) 
append: function(elem, text) { 
if (typeof text === "string") { 
if (elem.insertAdjacentHTML){ 
if (elem.tagName === "TABLE"){ 
var html = elem.outerHTML,ep = elem.parentNode,sl = html.length; 
text = html.substr(0,sl-8) + text + html.substr(sl-8,sl); 
ep.insertAdjacentHTML("beforeEnd", text); 
ep.replaceChild(ep.lastChild,elem); 
}else{ 
elem.insertAdjacentHTML("beforeEnd", text); 
} 
}else { 
var rlt=null,rg=doc.createRange(),fm=rg.createContextualFragment(text); 
rlt?elem.insertBefore(fm,rlt):elem.appendChild(fm); 
} 
}else if(typeof text === "object") elem.appendChild(text); 
}, 
//删除元素 
remove:function(elem){ 
if (elem.parentNode) elem.parentNode.removeChild(elem); 
}, 
//置空元素内容及子节点 
empty:function(elem){ 
while(elem.firstChild){ 
elem.removeChild(elem.firstChild); 
} 
}, 
//图像预加载 
loadimages: function(){ 
var a = arguments,loads = function(){ 
if(doc.images){ 
if(!doc.ps) doc.ps = []; 
var i,j=doc.ps.length; for(i=0; i&lt;a.length; i++) 
if (a[i].indexOf("#")!=0){ 
doc.ps[j] = new Image; doc.ps[j++].src=a[i];
}
} 
}; 
arguments.callee.caller ? loads():doc.ready(loads); 
},
//事件绑定 
bind: function () { 
if (win.addEventListener) { 
return function(elem, sType, fnc) { 
elem.addEventListener(sType, fnc, false); 
}; 
} else if (win.attachEvent) { 
return function(elem, sType, fnc) { 
elem.attachEvent("on" + sType, fnc); 
}; 
} else { 
return function(){}; 
} 
}(), 
//解除事件绑定 
unbind: function(elem, sType, fnc){ 
if(elem.removeEventListener){ 
elem.removeEventListener(sType, fnc, false); 
}else if(elem.detachEvent){ 
elem.detachEvent("on" + sType, fnc); 
}else{ 
elem["on"+ sType] = null; 
} 
}, 
//禁止事件冒泡 
stopPropagation: function(ev) { 
if (ev.stopPropagation) { 
ev.stopPropagation(); 
} else { 
ev.cancelBubble = true; 
} 
}, 
//禁止默认事件动作 
preventDefault: function(ev) { 
if (ev.preventDefault) { 
ev.preventDefault(); 
} else { 
ev.returnValue = false; 
} 
}, 
//获取鼠标位置 
getXY: function(ev){ 
return { 
x:ev.pageX ? ev.pageX : ev.clientX + docelem.scrollLeft, 
y:ev.pageY ? ev.pageY : ev.clientY + docelem.scrollTop 
}; 
}, 
//绑定拖动事件 
drag: function (obj, obj2){//obj：移动的对象 obj2：拖动点 
obj2 = obj2 || obj; //如果不设拖动点，那么拖动点即移动的对象 
var x, y, ut = this; 
obj2.onmousedown = function(e){ 
e = e || win.event; 
ut.preventDefault(e); 
obj.setCapture && obj.setCapture(); 
x = ut.getXY(e).x - parseInt(obj.style.left); 
y = ut.getXY(e).y - parseInt(obj.style.top); 
docelem.onmousemove = over; 
docelem.onmouseup = up; 
} 
function over(e){ 
e = e || win.event; 
obj.style.left = ut.getXY(e).x - x + "px"; 
obj.style.top = ut.getXY(e).y - y + "px"; 
} 
function up(){ 
obj.releaseCapture && obj.releaseCapture(); 
docelem.onmousemove = null; 
docelem.onmouseup = null; 
} 
}, 
//绑定横向滚动事件 
sliderX : function (obj,x1,x2,overEvent,upEvent){ 
var x, t , ut = this; 
obj.onmousedown = function (e){ 
e = e || win.event; 
ut.preventDefault(e); 
obj.setCapture && obj.setCapture(); 
t = ut.getXY(e).x - parseInt(obj.style.left); 
docelem.onmousemove = over; 
docelem.onmouseup = up; 
} 
function over(e){ 
e = e || win.event; 
x = ut.getXY(e).x-t; 
if(x&lt;x1) x=x1; 
if(x>x2) x=x2; 
obj.style.left = x + "px"; 
overEvent && overEvent(x); 
} 
function up(){ 
obj.releaseCapture && obj.releaseCapture(); 
docelem.onmousemove = null; 
docelem.onmouseup = null; 
upEvent && upEvent(x); 
} 
}, 
//绑定竖向滚动事件 
sliderY : function (obj,y1,y2,overEvent,upEvent){ 
var y, t , ut = this; 
obj.onmousedown = function (e){ 
e = e || win.event; 
ut.preventDefault(e); 
obj.setCapture && obj.setCapture(); 
t = ut.getXY(e).y - parseInt(obj.style.top); 
docelem.onmousemove = over; 
docelem.onmouseup = up; 
} 
function over(e){ 
e = e || win.event; 
y = ut.getXY(e).y - t; 
if(y&lt;y1) y=y1; 
if(y>y2) y=y2; 
obj.style.top = y + "px"; 
overEvent && overEvent(y); 
} 
function up(){ 
obj.releaseCapture && obj.releaseCapture(); 
docelem.onmousemove = null; 
docelem.onmouseup = null; 
upEvent && upEvent(y); 
} 
}, 
//设置cookie 
setCookie:function(n, v, t){ 
var exp = new Date(); 
exp.setTime(exp.getTime() + (t||24)*60*60*1000); 
doc.cookie = n + "="+ escape(v) + ";expires=" + exp.toGMTString()+';path=/'; 
}, 
//获取cookie 
getCookie:function(n){ 
var arr = doc.cookie.match(new RegExp("(^| )"+ n +"=([^;]*)(;|$)")); 
if(arr != null) return unescape(arr[2]); 
return null; 
} 
}); 
})(document,window);
//日期字符串格转日期 
App.parseDate = function(date){ 
var dt = date instanceof Date ? date: Date(date.replace("-","/")); 
return isNaN(dt.getTime()) ? null : dt ; 
}; 
//Json字符串转对象 
App.parseJSON = function(jsonString) { 
var result = false; 
try { 
result = eval('(' + jsonString + ')'); 
}catch (e) {}; 
return result; 
}; 
//取不重复唯一值 
App.getUid = function(){ 
return "uid"+(new Date()).getTime()+ parseInt(Math.random()*100000); 
}; 
//获取指定范围的随机数 
App.random = function (n1, n2){ 
return Math.floor(Math.random()*(n2-n1+1)) + n1; 
}; 
//秒转换为毫秒 
App.s2ms = function (str){ 
var t = str.split(":"); 
return t[0] * 60000 + t[1] * 1000; 
}; 
//毫秒转换为秒 
App.ms2s = function (ms){ 
return (ms/60000+":"+ms/1000%60).replace(/\.\d+/g,"").replace(/(^|:)(\d)(?!\d)/g,"$10$2"); 
}; 
//数字转换为编号 
App.num2number = function (num, n){ 
return Array(n).join("0").concat(num).slice(-n); 
}; 
//数字转化为中文 
App.num2gb = function (n){ 
return "零一二三四五六七八九".split("")[n]; 
}; 
//Flash生成代码 
App.getFlash = function (url, width, height, param){ 
var tagName = "", o1 = {width:width||1, height:height||1}, o2 = {}; 
if (this.isIE){ 
tagName = "object "; 
o1.classid = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"; 
o1.codebase = "http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0"; 
o2.movie = url; 
o2.quality = "high"; 
param && this.extend(o2, param); 
}else{ 
tagName = "embed "; 
o1.type = "application/x-shockwave-flash"; 
o1.pluginspage = "http://www.adobe.com/go/getflashplayer_cn"; 
o1.src = url; 
o1.quality = "high"; 
param && this.extend(o1, param); 
} 
if(o1.width&lt;2&&o1.height&lt;2) tagName+='style="position:absolute; top:-100px;" '; 
var a1=[], a2=[], i; 
for(i in o1) a1.push(i+'="'+o1[i]+'"'); 
for(i in o2) a2.push('&lt;param name="'+i+'" value="'+o2[i]+'" />'); 
return '&lt;'+tagName+a1.join(' ')+'>'+a2.join('')+'&lt;/'+tagName+'>'; 
}; 
//播放器生成代码 
App.getPlayer = function (url, width, height, param){ 
var wmp = ["6bf52a52-394a-11d3-b153-00c04f79faa6","application/x-mplayer2"]; 
var rmp = ["CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA","audio/x-pn-realaudio-plugin"]; 
var mp = /\.rm$/.test(url) ? rmp : wmp; 
var tagName = "", o1 = {width:width||1, height:height||1}, o2 = {}; 
if (this.isIE){ 
tagName = "object "; 
o1.classid = "clsid:"+mp[0]; 
o2.url = url; 
param && this.extend(o2, param); 
}else{ 
tagName = "embed "; 
o1.type = mp[1]; 
o1.src = url; 
param && this.extend(o1, param); 
} 
if(o1.width&lt;2&&o1.height&lt;2) tagName+='style="position:absolute; top:-100px;" '; 
var a1=[], a2=[], i; 
for(i in o1) a1.push(i+'="'+o1[i]+'"'); 
for(i in o2) a2.push('&lt;param name="'+i+'" value="'+o2[i]+'" />'); 
return '&lt;'+tagName+a1.join(' ')+'>'+a2.join('')+'&lt;/'+tagName+'>'; 
}; 
//获取XMLHttp对象 
App.xmlhttp = function (){ 
if (this.isFF) return new XMLHttpRequest(); 
var a = ["Msxml2.XMLHTTP.3.0","Msxml2.XMLHTTP","Microsoft.XMLHTTP","Msxml2.XMLHTTP.4.0","Msxml2.XMLHTTP.5.0"]; 
for (var i=0,l=a.length;i&lt;l;i++){ 
try{ 
return new ActiveXObject(a[i]); 
}catch(e){} 
} 
return false; 
}; 
//Get数据 
App.get = function (url,callBack){ 
var x = this.xmlhttp(); 
x.open("get",url,true); 
x.onreadystatechange = function(){ 
x.readyState==4 && (x.status==0||x.status==200) && callBack(x.responseText); 
} 
x.send(null); 
}; 
//Post数据 
App.post = function (url,arg,callBack){ 
var x = this.xmlhttp(); 
x.open("post",url,true); 
x.setRequestHeader("Content-Length",arg.length); 
x.setRequestHeader("Content-Type","application/x-www-form-urlencoded"); 
x.onreadystatechange = function(){ 
x.readyState==4 && (x.status==0||x.status==200) && callBack(x.responseText); 
} 
x.send(arg); 
};
</code>
</pre>
]]></content:encoded>
</item>
<item>
<title>How to style HTML5 &lt;meter&gt;tag</title>
<link>http://fireboy.sinaapp.com/meter/</link>
<pubDate>Wed, 08 Oct 2014 02:10:44 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=162</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-css"><code>
meter{width: 25%;margin-top: 20px;}
meter.custom::-webkit-meter-bar {
  background: #FFF;
}
meter.custom::-webkit-meter-optimum-value {
  background: linear-gradient(to bottom, #62c462, #51a351);
}
meter.custom::-webkit-meter-suboptimum-value {
  background: linear-gradient(to bottom, #fbb450, #f89406);
}
meter.custom::-webkit-meter-even-less-good-value {
  background: linear-gradient(to bottom, #ee5f5b, #bd362f);
}
</code></pre>
<pre class="language-markup"><code>
&lt;meter min="0" max="30" optimum="30" low="10" high="20" value="5">5&lt;/meter>
&lt;meter min="0" max="30" optimum="30" low="10" high="20" value="15">15&lt;/meter>
&lt;meter min="0" max="30" optimum="30" low="10" high="20" value="25">25&lt;/meter>
&lt;meter min="0" max="30" optimum="30" low="10" high="20" value="5" class="custom">5&lt;/meter>
&lt;meter min="0" max="30" optimum="30" low="10" high="20" value="15" class="custom">15&lt;/meter>
&lt;meter min="0" max="30" optimum="30" low="10" high="20" value="25" class="custom">25&lt;/meter>
</code></pre>]]></content:encoded>
</item>
<item>
<title>复制到剪贴板的js代码 兼容ie</title>
<link>http://fireboy.sinaapp.com/%e5%a4%8d%e5%88%b6%e5%88%b0%e5%89%aa%e8%b4%b4%e6%9d%bf%e7%9a%84js%e4%bb%a3%e7%a0%81%ef%bc%88%e5%85%bc%e5%ae%b9ie%e3%80%81firefox%e3%80%81chorme%e3%80%81safari-%e4%bb%80%e4%b9%88%e9%83%bd%e5%85%bc/</link>
<pubDate>Sat, 04 Oct 2014 19:18:39 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=114</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-markup"><code class="language-markup">
 &lt;div id="f">window.clipboardData&lt;/div>
</code></pre>
<pre class="language-javascript"><code class="language-javascript">
function copy_code(copyText) {
   if (window.clipboardData){
       window.clipboardData.setData("Text", copyText)
   }else{
       var flashcopier = 'flashcopier';
       if(!document.getElementById(flashcopier)){
         var divholder = document.createElement('div');
         divholder.id = flashcopier;
         document.body.appendChild(divholder);
       }
       document.getElementById(flashcopier).innerHTML = '';
       var divinfo = '<embed src="../js/_clipboard.swf" FlashVars="clipboard='+encodeURIComponent(copyText)+'" width="0" height="0" type="application/x-shockwave-flash"></embed>';
       document.getElementById(flashcopier).innerHTML = divinfo;
   }
   alert('copy成功！');
}
</code></pre>]]></content:encoded>
</item>
<item>
<title>左栏固定，右栏自适应布局的几种方式</title>
<link>http://fireboy.sinaapp.com/right-column-adaptive-layout/</link>
<pubDate>Mon, 13 Oct 2014 06:32:22 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=172</guid>
<description></description>
<content:encoded><![CDATA[<h2>一、使用margin实现左固定右自适应</h2>
<pre class="language-css"><code>
    #left {
      width: 250px;
      height: 250px;
      background: rgb(0, 214, 255);
      float: left;
    }
    #right {
      height: 200px;
      background: rgb(76, 129, 207);
      margin-left:110px;
    }
</code></pre>
<h2>二、使用position:absolute实现的左固定右自适应</h2>
<pre class="language-css"><code>
    #left {
      width: 250px;
      height: 250px;
      background: rgb(0, 214, 255);
      position:absolute;
    }
    #right {
      height: 200px;
      background: rgb(76, 129, 207);
      margin-left:110px;
    }
</code></pre>
<h2>三、使用overflow:hidden实现的左固定右自适应</h2>
<pre class="language-css"><code>
    #left {
      float:left;
      width: 250px;
      height: 250px;
      background: rgb(0, 214, 255);
      margin-right:10px;
    }
    #right {
      height: 200px;
      background: rgb(76, 129, 207);
      overflow:hidden;
    }
</code></pre>
]]></content:encoded>
</item>
<item>
<title>js缓动效果</title>
<link>http://fireboy.sinaapp.com/js-easeing/</link>
<pubDate>Mon, 13 Oct 2014 08:58:18 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=174</guid>
<description></description>
<content:encoded><![CDATA[<h2>没有加速度的线性运动</h2>
数学公式为
f(x)=x
js实现如下
<pre class="language-javascript"><code>
AnimationTimer.makeLinear = function () {
   return function (percentComplete) {
      return percentComplete;
   };
};
</code></pre>
<h2>逐渐加速的缓入运动</h2>
数学公式为
f(x)=x2
js实现如下
<pre class="language-javascript"><code>
AnimationTimer.makeEaseIn = function (strength) {
   return function (percentComplete) {
      return Math.pow(percentComplete, strength*2);
   };
};
</code></pre>
<h2>逐渐减速的缓出运动</h2>
数学公式为
f(x)=1-(1-x)2
js实现如下
<pre class="language-javascript"><code>
AnimationTimer.makeEaseOut = function (strength) {
   return function (percentComplete) {
      return 1 - Math.pow(1 - percentComplete, strength*2);
   };
};
</code></pre>
<h2>缓入缓出运动</h2>
数学公式为
f(x)=x-sin(x*2π)/(2π)
js实现如下
<pre class="language-javascript"><code>
AnimationTimer.makeEaseInOut = function () {
   return function (percentComplete) {
      return percentComplete - Math.sin(percentComplete*2*Math.PI) / (2*Math.PI);
   };
};
</code></pre>
<h2>弹簧运动</h2>
数学公式为
f(x)=(1-cos(x*Npasses * π) * (1-π))+x
Npassed表示运动物体穿越中轴的次数。
js实现如下
<pre class="language-javascript"><code>
AnimationTimer.makeElastic = function (passes) {
   passes = passes || 3;
   return function (percentComplete) {
       return ((1-Math.cos(percentComplete * Math.PI * passes)) *
               (1 - percentComplete)) + percentComplete;
   };
};
</code></pre>
<h2>弹跳运动</h2>
Nbounces表示运动物体被弹起的总次数，
弹起的次数为偶数的时候，数学公式为：
f(x)=(1=cos(x * Nbounces * π) * (1-π))+x
弹起的次数为奇数的时候，数学公式为：
f(x)=2-(((1-cos(x * π * Nbounces)) * (1-x)+x)
js实现如下
<pre class="language-javascript"><code>
AnimationTimer.makeBounce = function (bounces) {
   var fn = AnimationTimer.makeElastic(bounces);
   return function (percentComplete) {
      percentComplete = fn(percentComplete);
      return percentComplete <= 1 ? percentComplete : 2-percentComplete;
   }; 
};
</code></pre>]]></content:encoded>
</item>
<item>
<title>原型对象的问题</title>
<link>http://fireboy.sinaapp.com/js-prototype/</link>
<pubDate>Tue, 14 Oct 2014 13:57:33 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=176</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-javascript"><code>
function Person(){}
 
Person.prototype={
    name:"wenbin",
    age:29,
    job:"software engineer",
    friends:["Shelby","Court"],
    sayName:function(){
        console.log(this.name);
    }
}
 
var person1=new Person();
var person2=new Person();
person1.friends.push("Van");
 
console.log(person1.friends);//Shelby,Court,Van
console.log(person2.friends);//Shelby,Court,Van
console.log(person1.friends===person2.friends);//true
</code>
</pre>
对person1.friends的修改也会反映到person2.friends中。
<pre class="language-javascript"><code>
function Person(name,age,job){
    this.name=name;
    this.age=age;
    this.job=job;
    this.friends=["Shelby","Court"];
}
 
Person.prototype={
    constructor:Person,
    sayName:function(){
        console.log(this.name);
    }
}
 
var person1=new Person("Nicholas",29,"Software Engineer");
var person2=new Person("Greg",27,"Doctor");
 
person1.friends.push("Van");
console.log(person1.friends);//Shelby,Court,Van
console.log(person2.friends);//Shelby,Court
console.log(person1.friends===person2.friends);//flase
console.log(person1.sayName===person2.sayName);//true
</code></pre>
组合使用构造函数模式和原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性
<h3>继承</h3>
<pre class="language-javascript"><code>
function SuperType(){
    this.colors=["red","blue","green"];
}
 
function SubType(){}
 
SubType.prototype=new SuperType();
 
var instance1=new SubType();
instance1.colors.push("black");
console.log(instance1.colors);//red,blue,green,black
 
var instance2=new SubType();
console.log(instance2.colors);//red,blue,green,black
</code></pre>
在创建子类型的实例时，不能向超类型的构造函数中传递参数。
<pre class="language-javascript"><code>
function SuperType(name){
    this.name=name;
    this.colors=["red","blue","green"];
}
 
SuperType.prototype.sayName=function(){
    console.log(this.name);
};
 
function SubType(name,age){
    SuperType.call(this,name);
    this.age=age;
}
 
SubType.prototype=new SuperType();
SubType.prototype.construtor=SubType;
SubType.prototype.sayAge=function(){
    console.log(this.age);
};
var instance1=new SubType("wenbin",29);
instance1.colors.push("black");
console.log(instance1.colors);//red,blue,green,black
instance1.sayName();//wenbin
instance1.sayAge();//29
 
var instance2=new SubType("greg",27);
console.log(instance2.colors);//red,blue,green
instance2.sayName();//greg
instance2.sayAge();//27
</code></pre>
组合继承使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承
<pre class="language-javascript"><code>
function object(o){
    function F(){}
    F.prototype=o;
    return new F();
}
function inheritPrototype(subType,superType){
    var prototype=object(superType.prototype);
    prototype.constructor=subType;
    subType.prototype=prototype;
}
 
function SuperType(name){
    this.name=name;
    this.colors=["red","blue","green"];
}
 
SuperType.prototype.sayName=function(){
    console.log(this.name);
};
 
function SubType(name,age){
    SuperType.call(this,name);
    this.age=age;
}
inheritPrototype(SubType,SuperType);
SubType.prototype.sayAge=function(){
    console.log(this.age);
}
var instance=new SubType("wenbin",29);
console.log(instance.name);//wenbin
console.log(instance.age);//29
</code></pre>
通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。]]></content:encoded>
</item>
<item>
<title>Javascript中的浮点数相乘</title>
<link>http://fireboy.sinaapp.com/javascript-float/</link>
<pubDate>Tue, 21 Oct 2014 14:36:12 +0000</pubDate>
<dc:creator><![CDATA[admin]]></dc:creator>
<guid isPermaLink="false">http://fireboy.sinaapp.com/?p=179</guid>
<description></description>
<content:encoded><![CDATA[<pre class="language-javascript"><code>
function FxF(f1, f2) {
    f1 += '';
    f2 += '';
    var f1Len = f1.split('.')[1].length,
        f2Len = f2.split('.')[1].length;
    if (f1Len) {
        f1 = f1.replace('.', '');
    }
    if (f2Len) {
        f2 = f2.replace('.', '');
    }
    return f1 * f2 / Math.pow(10, f1Len + f2Len);
};
</code>
</pre>]]></content:encoded>
</item>
</channel>
</rss>