@color: color(`window.colors.baseColor`);
@base-color: #111;
@fnord: "I am fnord.";
@var: 'fnord';

/*
//访问JavaScript环境
 @height: `window.innerHeight`; 
 */
@base-color:#fff;
@base-height: 5%;
@base-fontsize:10px;
@import "style";
@base-url: "http://assets.fnord.com";
//JavaScript 表达式也可以在.less 文件中使用. 可以通过反引号`的方式使用
@varjs: ~`"@{var}".toUpperCase() + '!'`;

.rounded-corners (@radius: 5px) {
  border-radius: @radius;
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
}
.box-shadow (@x: 0, @y: 0, @blur: 1px, @color: #000) {
  box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  -webkit-box-shadow: @arguments;
}

//模式匹配和导引表达式
//我们也可以匹配多个参数
/* 
.mixin (@a, @b) {
  color: fade(@a, @b);
}
 */
.mixin (dark, @color) {
  color: darken(@color, 10%);
}
.mixin (light, @color) {
  color: lighten(@color, 10%);
}
.mixin (@_, @color) {
  display: block;
}

@switch: dark;

.test-class {
  .mixin(@switch, #888);
  height:100px+100%;//200px
  content: @@var;
  color:saturate(@color, 5%);
  color:@color+#122;
  background-color: lighten(spin(@color, 8), 25%);
  background-image: url(~"@{base-url}/images/bg.png");//~无效？
  //命名空间
  #header>.name;
  content:@varjs;
  //避免编译
  /* 有时候我们需要输出一些不正确的CSS语法或者使用一些 LESS不认识的专有语法.
  要输出这样的值我们可以在字符串前加上一个 ~ */
  filter: ~"ms:alwaysHasItsOwnSyntax.For.Stuff()";
}

#header {
  h1 {
    font-size: 26px;
    font-weight: bold;
  }
  h2{color:#585858;}
  p { 
  	font-size: 12px;
    a { 
    	text-decoration: none;
    	color:@base-color * 2;
      	&:hover { border: (@base-fontsize*1.5) solid  desaturate(@base-color, 10%);}
    }
  }
  .name{padding:5px+15;}
  .rounded-corners;
  .box-shadow(1px,5px);
  padding:100px;
  //作用域
  @color:#999;
  background:@color/4;
}

#footer {
  .rounded-corners(10px);
  padding:100px;
  background:@base-color/4;
  /* height: 0px+@height; */
}

.mixin (@a) when (lightness(@a) >= 50%) {
  background-color: black;
}
.mixin (@a) when (lightness(@a) < 50%) {
  background-color: white;
}
//导引序列使用逗号‘,’—分割，当且仅当所有条件都符合时，才会被视为匹配成功
//.mixin (@a) when (@a > 10), (@a < -10) { ... }
.class1 { .mixin(#ddd) }
.class2 { .mixin(#555) }

/* 
最后，如果想基于值的类型进行匹配，我们就可以使用is*函式：

.mixin (@a, @b: 0) when (isnumber(@b)) { ... }
.mixin (@a, @b: black) when (iscolor(@b)) { ... }

iscolor
isnumber
isstring
iskeyword
isurl
如果你想判断一个值是纯数字，还是某个单位量，可以使用下列函式：

ispixel
ispercentage
isem
最后再补充一点，在导引序列中可以使用and关键字实现与条件：

.mixin (@a) when (isnumber(@a)) and (@a > 0) { ... }
使用not关键字实现或条件

.mixin (@b) when not (@b > 0) { ... }

 */

 /* 
 lighten(@color, 10%);     // return a color which is 10% *lighter* than @color
darken(@color, 10%);      // return a color which is 10% *darker* than @color

saturate(@color, 10%);    // return a color 10% *more* saturated than @color
desaturate(@color, 10%);  // return a color 10% *less* saturated than @color

fadein(@color, 10%);      // return a color 10% *less* transparent than @color
fadeout(@color, 10%);     // return a color 10% *more* transparent than @color
fade(@color, 50%);        // return @color with 50% transparency

spin(@color, 10);         // return a color with a 10 degree larger in hue than @color
spin(@color, -10);        // return a color with a 10 degree smaller hue than @color

mix(@color1, @color2);    // return a mix of @color1 and @color2

你还可以提取颜色信息:

hue(@color);        // returns the `hue` channel of @color
saturation(@color); // returns the `saturation` channel of @color
lightness(@color);  // returns the 'lightness' channel of @color
如果你想在一种颜色的通道上创建另一种颜色，这些函数就显得那么的好用，例如:

@new: hsl(hue(@old), 45%, 90%);

 */

 /* 
round(1.67); // returns `2`
ceil(2.4);   // returns `3`
floor(2.6);  // returns `2`
percentage(0.5);
 */